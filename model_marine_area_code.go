/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MarineAreaCode Marine area code as defined in NWS Directive 10-302: * AM: Western North Atlantic Ocean and along U.S. East Coast south of Currituck Beach Light NC following the coastline into Gulf of Mexico to Ocean Reef FL including the Caribbean * AN: Western North Atlantic Ocean and along U.S. East Coast from Canadian border south to Currituck Beach Light NC * GM: Gulf of Mexico and along the U.S. Gulf Coast from the Mexican border to Ocean Reef FL * LC: Lake St. Clair * LE: Lake Erie * LH: Lake Huron * LM: Lake Michigan * LO: Lake Ontario * LS: Lake Superior * PH: Central Pacific Ocean including Hawaiian waters * PK: North Pacific Ocean near Alaska and along Alaska coastline including the Bering Sea and the Gulf of Alaska * PM: Western Pacific Ocean including Mariana Island waters * PS: South Central Pacific Ocean including American Samoa waters * PZ: Eastern North Pacific Ocean and along U.S. West Coast from Canadian border to Mexican border * SL: St. Lawrence River above St. Regis 
type MarineAreaCode string

// List of MarineAreaCode
const (
	AM MarineAreaCode = "AM"
	AN MarineAreaCode = "AN"
	GM MarineAreaCode = "GM"
	LC MarineAreaCode = "LC"
	LE MarineAreaCode = "LE"
	LH MarineAreaCode = "LH"
	LM MarineAreaCode = "LM"
	LO MarineAreaCode = "LO"
	LS MarineAreaCode = "LS"
	PH MarineAreaCode = "PH"
	PK MarineAreaCode = "PK"
	PM MarineAreaCode = "PM"
	PS MarineAreaCode = "PS"
	PZ MarineAreaCode = "PZ"
	SL MarineAreaCode = "SL"
)

// All allowed values of MarineAreaCode enum
var AllowedMarineAreaCodeEnumValues = []MarineAreaCode{
	"AM",
	"AN",
	"GM",
	"LC",
	"LE",
	"LH",
	"LM",
	"LO",
	"LS",
	"PH",
	"PK",
	"PM",
	"PS",
	"PZ",
	"SL",
}

func (v *MarineAreaCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MarineAreaCode(value)
	for _, existing := range AllowedMarineAreaCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MarineAreaCode", value)
}

// NewMarineAreaCodeFromValue returns a pointer to a valid MarineAreaCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMarineAreaCodeFromValue(v string) (*MarineAreaCode, error) {
	ev := MarineAreaCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MarineAreaCode: valid values are %v", v, AllowedMarineAreaCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MarineAreaCode) IsValid() bool {
	for _, existing := range AllowedMarineAreaCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MarineAreaCode value
func (v MarineAreaCode) Ptr() *MarineAreaCode {
	return &v
}

type NullableMarineAreaCode struct {
	value *MarineAreaCode
	isSet bool
}

func (v NullableMarineAreaCode) Get() *MarineAreaCode {
	return v.value
}

func (v *NullableMarineAreaCode) Set(val *MarineAreaCode) {
	v.value = val
	v.isSet = true
}

func (v NullableMarineAreaCode) IsSet() bool {
	return v.isSet
}

func (v *NullableMarineAreaCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarineAreaCode(val *MarineAreaCode) *NullableMarineAreaCode {
	return &NullableMarineAreaCode{value: val, isSet: true}
}

func (v NullableMarineAreaCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarineAreaCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

