/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// StateTerritoryCode the model 'StateTerritoryCode'
type StateTerritoryCode string

// List of StateTerritoryCode
const (
	AL StateTerritoryCode = "AL"
	AK StateTerritoryCode = "AK"
	AS StateTerritoryCode = "AS"
	AR StateTerritoryCode = "AR"
	AZ StateTerritoryCode = "AZ"
	CA StateTerritoryCode = "CA"
	CO StateTerritoryCode = "CO"
	CT StateTerritoryCode = "CT"
	DE StateTerritoryCode = "DE"
	DC StateTerritoryCode = "DC"
	FL StateTerritoryCode = "FL"
	GA StateTerritoryCode = "GA"
	GU StateTerritoryCode = "GU"
	HI StateTerritoryCode = "HI"
	ID StateTerritoryCode = "ID"
	IL StateTerritoryCode = "IL"
	IN StateTerritoryCode = "IN"
	IA StateTerritoryCode = "IA"
	KS StateTerritoryCode = "KS"
	KY StateTerritoryCode = "KY"
	LA StateTerritoryCode = "LA"
	ME StateTerritoryCode = "ME"
	MD StateTerritoryCode = "MD"
	MA StateTerritoryCode = "MA"
	MI StateTerritoryCode = "MI"
	MN StateTerritoryCode = "MN"
	MS StateTerritoryCode = "MS"
	MO StateTerritoryCode = "MO"
	MT StateTerritoryCode = "MT"
	NE StateTerritoryCode = "NE"
	NV StateTerritoryCode = "NV"
	NH StateTerritoryCode = "NH"
	NJ StateTerritoryCode = "NJ"
	NM StateTerritoryCode = "NM"
	NY StateTerritoryCode = "NY"
	NC StateTerritoryCode = "NC"
	ND StateTerritoryCode = "ND"
	OH StateTerritoryCode = "OH"
	OK StateTerritoryCode = "OK"
	OR StateTerritoryCode = "OR"
	PA StateTerritoryCode = "PA"
	PR StateTerritoryCode = "PR"
	RI StateTerritoryCode = "RI"
	SC StateTerritoryCode = "SC"
	SD StateTerritoryCode = "SD"
	TN StateTerritoryCode = "TN"
	TX StateTerritoryCode = "TX"
	UT StateTerritoryCode = "UT"
	VT StateTerritoryCode = "VT"
	VI StateTerritoryCode = "VI"
	VA StateTerritoryCode = "VA"
	WA StateTerritoryCode = "WA"
	WV StateTerritoryCode = "WV"
	WI StateTerritoryCode = "WI"
	WY StateTerritoryCode = "WY"
	MP StateTerritoryCode = "MP"
	PW StateTerritoryCode = "PW"
	FM StateTerritoryCode = "FM"
	MH StateTerritoryCode = "MH"
)

// All allowed values of StateTerritoryCode enum
var AllowedStateTerritoryCodeEnumValues = []StateTerritoryCode{
	"AL",
	"AK",
	"AS",
	"AR",
	"AZ",
	"CA",
	"CO",
	"CT",
	"DE",
	"DC",
	"FL",
	"GA",
	"GU",
	"HI",
	"ID",
	"IL",
	"IN",
	"IA",
	"KS",
	"KY",
	"LA",
	"ME",
	"MD",
	"MA",
	"MI",
	"MN",
	"MS",
	"MO",
	"MT",
	"NE",
	"NV",
	"NH",
	"NJ",
	"NM",
	"NY",
	"NC",
	"ND",
	"OH",
	"OK",
	"OR",
	"PA",
	"PR",
	"RI",
	"SC",
	"SD",
	"TN",
	"TX",
	"UT",
	"VT",
	"VI",
	"VA",
	"WA",
	"WV",
	"WI",
	"WY",
	"MP",
	"PW",
	"FM",
	"MH",
}

func (v *StateTerritoryCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := StateTerritoryCode(value)
	for _, existing := range AllowedStateTerritoryCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid StateTerritoryCode", value)
}

// NewStateTerritoryCodeFromValue returns a pointer to a valid StateTerritoryCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewStateTerritoryCodeFromValue(v string) (*StateTerritoryCode, error) {
	ev := StateTerritoryCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for StateTerritoryCode: valid values are %v", v, AllowedStateTerritoryCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v StateTerritoryCode) IsValid() bool {
	for _, existing := range AllowedStateTerritoryCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to StateTerritoryCode value
func (v StateTerritoryCode) Ptr() *StateTerritoryCode {
	return &v
}

type NullableStateTerritoryCode struct {
	value *StateTerritoryCode
	isSet bool
}

func (v NullableStateTerritoryCode) Get() *StateTerritoryCode {
	return v.value
}

func (v *NullableStateTerritoryCode) Set(val *StateTerritoryCode) {
	v.value = val
	v.isSet = true
}

func (v NullableStateTerritoryCode) IsSet() bool {
	return v.isSet
}

func (v *NullableStateTerritoryCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableStateTerritoryCode(val *StateTerritoryCode) *NullableStateTerritoryCode {
	return &NullableStateTerritoryCode{value: val, isSet: true}
}

func (v NullableStateTerritoryCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableStateTerritoryCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

