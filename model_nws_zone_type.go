/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NWSZoneType the model 'NWSZoneType'
type NWSZoneType string

// List of NWSZoneType
const (
	LAND NWSZoneType = "land"
	MARINE NWSZoneType = "marine"
	FORECAST NWSZoneType = "forecast"
	PUBLIC NWSZoneType = "public"
	COASTAL NWSZoneType = "coastal"
	OFFSHORE NWSZoneType = "offshore"
	FIRE NWSZoneType = "fire"
	COUNTY NWSZoneType = "county"
)

// All allowed values of NWSZoneType enum
var AllowedNWSZoneTypeEnumValues = []NWSZoneType{
	"land",
	"marine",
	"forecast",
	"public",
	"coastal",
	"offshore",
	"fire",
	"county",
}

func (v *NWSZoneType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NWSZoneType(value)
	for _, existing := range AllowedNWSZoneTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NWSZoneType", value)
}

// NewNWSZoneTypeFromValue returns a pointer to a valid NWSZoneType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNWSZoneTypeFromValue(v string) (*NWSZoneType, error) {
	ev := NWSZoneType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NWSZoneType: valid values are %v", v, AllowedNWSZoneTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NWSZoneType) IsValid() bool {
	for _, existing := range AllowedNWSZoneTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NWSZoneType value
func (v NWSZoneType) Ptr() *NWSZoneType {
	return &v
}

type NullableNWSZoneType struct {
	value *NWSZoneType
	isSet bool
}

func (v NullableNWSZoneType) Get() *NWSZoneType {
	return v.value
}

func (v *NullableNWSZoneType) Set(val *NWSZoneType) {
	v.value = val
	v.isSet = true
}

func (v NullableNWSZoneType) IsSet() bool {
	return v.isSet
}

func (v *NullableNWSZoneType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNWSZoneType(val *NWSZoneType) *NullableNWSZoneType {
	return &NullableNWSZoneType{value: val, isSet: true}
}

func (v NullableNWSZoneType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNWSZoneType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

