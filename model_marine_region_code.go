/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MarineRegionCode Marine region code. These are groups of marine areas combined. * AL: Alaska waters (PK) * AT: Atlantic Ocean (AM, AN) * GL: Great Lakes (LC, LE, LH, LM, LO, LS, SL) * GM: Gulf of Mexico (GM) * PA: Eastern Pacific Ocean and U.S. West Coast (PZ) * PI: Central and Western Pacific (PH, PM, PS) 
type MarineRegionCode string

// List of MarineRegionCode
const (
	AL MarineRegionCode = "AL"
	AT MarineRegionCode = "AT"
	GL MarineRegionCode = "GL"
	GM MarineRegionCode = "GM"
	PA MarineRegionCode = "PA"
	PI MarineRegionCode = "PI"
)

// All allowed values of MarineRegionCode enum
var AllowedMarineRegionCodeEnumValues = []MarineRegionCode{
	"AL",
	"AT",
	"GL",
	"GM",
	"PA",
	"PI",
}

func (v *MarineRegionCode) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MarineRegionCode(value)
	for _, existing := range AllowedMarineRegionCodeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MarineRegionCode", value)
}

// NewMarineRegionCodeFromValue returns a pointer to a valid MarineRegionCode
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMarineRegionCodeFromValue(v string) (*MarineRegionCode, error) {
	ev := MarineRegionCode(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MarineRegionCode: valid values are %v", v, AllowedMarineRegionCodeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MarineRegionCode) IsValid() bool {
	for _, existing := range AllowedMarineRegionCodeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MarineRegionCode value
func (v MarineRegionCode) Ptr() *MarineRegionCode {
	return &v
}

type NullableMarineRegionCode struct {
	value *MarineRegionCode
	isSet bool
}

func (v NullableMarineRegionCode) Get() *MarineRegionCode {
	return v.value
}

func (v *NullableMarineRegionCode) Set(val *MarineRegionCode) {
	v.value = val
	v.isSet = true
}

func (v NullableMarineRegionCode) IsSet() bool {
	return v.isSet
}

func (v *NullableMarineRegionCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMarineRegionCode(val *MarineRegionCode) *NullableMarineRegionCode {
	return &NullableMarineRegionCode{value: val, isSet: true}
}

func (v NullableMarineRegionCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMarineRegionCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

