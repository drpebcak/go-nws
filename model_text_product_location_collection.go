/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the TextProductLocationCollection type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &TextProductLocationCollection{}

// TextProductLocationCollection struct for TextProductLocationCollection
type TextProductLocationCollection struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	Locations *map[string]string `json:"locations,omitempty"`
}

// NewTextProductLocationCollection instantiates a new TextProductLocationCollection object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewTextProductLocationCollection() *TextProductLocationCollection {
	this := TextProductLocationCollection{}
	return &this
}

// NewTextProductLocationCollectionWithDefaults instantiates a new TextProductLocationCollection object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewTextProductLocationCollectionWithDefaults() *TextProductLocationCollection {
	this := TextProductLocationCollection{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *TextProductLocationCollection) GetContext() JsonLdContext {
	if o == nil || IsNil(o.Context) {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextProductLocationCollection) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *TextProductLocationCollection) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *TextProductLocationCollection) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetLocations returns the Locations field value if set, zero value otherwise.
func (o *TextProductLocationCollection) GetLocations() map[string]string {
	if o == nil || IsNil(o.Locations) {
		var ret map[string]string
		return ret
	}
	return *o.Locations
}

// GetLocationsOk returns a tuple with the Locations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *TextProductLocationCollection) GetLocationsOk() (*map[string]string, bool) {
	if o == nil || IsNil(o.Locations) {
		return nil, false
	}
	return o.Locations, true
}

// HasLocations returns a boolean if a field has been set.
func (o *TextProductLocationCollection) HasLocations() bool {
	if o != nil && !IsNil(o.Locations) {
		return true
	}

	return false
}

// SetLocations gets a reference to the given map[string]string and assigns it to the Locations field.
func (o *TextProductLocationCollection) SetLocations(v map[string]string) {
	o.Locations = &v
}

func (o TextProductLocationCollection) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o TextProductLocationCollection) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["@context"] = o.Context
	}
	if !IsNil(o.Locations) {
		toSerialize["locations"] = o.Locations
	}
	return toSerialize, nil
}

type NullableTextProductLocationCollection struct {
	value *TextProductLocationCollection
	isSet bool
}

func (v NullableTextProductLocationCollection) Get() *TextProductLocationCollection {
	return v.value
}

func (v *NullableTextProductLocationCollection) Set(val *TextProductLocationCollection) {
	v.value = val
	v.isSet = true
}

func (v NullableTextProductLocationCollection) IsSet() bool {
	return v.isSet
}

func (v *NullableTextProductLocationCollection) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableTextProductLocationCollection(val *TextProductLocationCollection) *NullableTextProductLocationCollection {
	return &NullableTextProductLocationCollection{value: val, isSet: true}
}

func (v NullableTextProductLocationCollection) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableTextProductLocationCollection) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


