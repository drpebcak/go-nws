/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// PointRelativeLocation - struct for PointRelativeLocation
type PointRelativeLocation struct {
	RelativeLocationGeoJson *RelativeLocationGeoJson
	RelativeLocationJsonLd *RelativeLocationJsonLd
}

// RelativeLocationGeoJsonAsPointRelativeLocation is a convenience function that returns RelativeLocationGeoJson wrapped in PointRelativeLocation
func RelativeLocationGeoJsonAsPointRelativeLocation(v *RelativeLocationGeoJson) PointRelativeLocation {
	return PointRelativeLocation{
		RelativeLocationGeoJson: v,
	}
}

// RelativeLocationJsonLdAsPointRelativeLocation is a convenience function that returns RelativeLocationJsonLd wrapped in PointRelativeLocation
func RelativeLocationJsonLdAsPointRelativeLocation(v *RelativeLocationJsonLd) PointRelativeLocation {
	return PointRelativeLocation{
		RelativeLocationJsonLd: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *PointRelativeLocation) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into RelativeLocationGeoJson
	err = newStrictDecoder(data).Decode(&dst.RelativeLocationGeoJson)
	if err == nil {
		jsonRelativeLocationGeoJson, _ := json.Marshal(dst.RelativeLocationGeoJson)
		if string(jsonRelativeLocationGeoJson) == "{}" { // empty struct
			dst.RelativeLocationGeoJson = nil
		} else {
			if err = validator.Validate(dst.RelativeLocationGeoJson); err != nil {
				dst.RelativeLocationGeoJson = nil
			} else {
				match++
			}
		}
	} else {
		dst.RelativeLocationGeoJson = nil
	}

	// try to unmarshal data into RelativeLocationJsonLd
	err = newStrictDecoder(data).Decode(&dst.RelativeLocationJsonLd)
	if err == nil {
		jsonRelativeLocationJsonLd, _ := json.Marshal(dst.RelativeLocationJsonLd)
		if string(jsonRelativeLocationJsonLd) == "{}" { // empty struct
			dst.RelativeLocationJsonLd = nil
		} else {
			if err = validator.Validate(dst.RelativeLocationJsonLd); err != nil {
				dst.RelativeLocationJsonLd = nil
			} else {
				match++
			}
		}
	} else {
		dst.RelativeLocationJsonLd = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.RelativeLocationGeoJson = nil
		dst.RelativeLocationJsonLd = nil

		return fmt.Errorf("data matches more than one schema in oneOf(PointRelativeLocation)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(PointRelativeLocation)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src PointRelativeLocation) MarshalJSON() ([]byte, error) {
	if src.RelativeLocationGeoJson != nil {
		return json.Marshal(&src.RelativeLocationGeoJson)
	}

	if src.RelativeLocationJsonLd != nil {
		return json.Marshal(&src.RelativeLocationJsonLd)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *PointRelativeLocation) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.RelativeLocationGeoJson != nil {
		return obj.RelativeLocationGeoJson
	}

	if obj.RelativeLocationJsonLd != nil {
		return obj.RelativeLocationJsonLd
	}

	// all schemas are nil
	return nil
}

type NullablePointRelativeLocation struct {
	value *PointRelativeLocation
	isSet bool
}

func (v NullablePointRelativeLocation) Get() *PointRelativeLocation {
	return v.value
}

func (v *NullablePointRelativeLocation) Set(val *PointRelativeLocation) {
	v.value = val
	v.isSet = true
}

func (v NullablePointRelativeLocation) IsSet() bool {
	return v.isSet
}

func (v *NullablePointRelativeLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePointRelativeLocation(val *PointRelativeLocation) *NullablePointRelativeLocation {
	return &NullablePointRelativeLocation{value: val, isSet: true}
}

func (v NullablePointRelativeLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePointRelativeLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


