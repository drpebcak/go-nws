/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NWSCenterWeatherServiceUnitId Three-letter identifier for a Center Weather Service Unit (CWSU).
type NWSCenterWeatherServiceUnitId string

// List of NWSCenterWeatherServiceUnitId
const (
	ZAB NWSCenterWeatherServiceUnitId = "ZAB"
	ZAN NWSCenterWeatherServiceUnitId = "ZAN"
	ZAU NWSCenterWeatherServiceUnitId = "ZAU"
	ZBW NWSCenterWeatherServiceUnitId = "ZBW"
	ZDC NWSCenterWeatherServiceUnitId = "ZDC"
	ZDV NWSCenterWeatherServiceUnitId = "ZDV"
	ZFA NWSCenterWeatherServiceUnitId = "ZFA"
	ZFW NWSCenterWeatherServiceUnitId = "ZFW"
	ZHU NWSCenterWeatherServiceUnitId = "ZHU"
	ZID NWSCenterWeatherServiceUnitId = "ZID"
	ZJX NWSCenterWeatherServiceUnitId = "ZJX"
	ZKC NWSCenterWeatherServiceUnitId = "ZKC"
	ZLA NWSCenterWeatherServiceUnitId = "ZLA"
	ZLC NWSCenterWeatherServiceUnitId = "ZLC"
	ZMA NWSCenterWeatherServiceUnitId = "ZMA"
	ZME NWSCenterWeatherServiceUnitId = "ZME"
	ZMP NWSCenterWeatherServiceUnitId = "ZMP"
	ZNY NWSCenterWeatherServiceUnitId = "ZNY"
	ZOA NWSCenterWeatherServiceUnitId = "ZOA"
	ZOB NWSCenterWeatherServiceUnitId = "ZOB"
	ZSE NWSCenterWeatherServiceUnitId = "ZSE"
	ZTL NWSCenterWeatherServiceUnitId = "ZTL"
)

// All allowed values of NWSCenterWeatherServiceUnitId enum
var AllowedNWSCenterWeatherServiceUnitIdEnumValues = []NWSCenterWeatherServiceUnitId{
	"ZAB",
	"ZAN",
	"ZAU",
	"ZBW",
	"ZDC",
	"ZDV",
	"ZFA",
	"ZFW",
	"ZHU",
	"ZID",
	"ZJX",
	"ZKC",
	"ZLA",
	"ZLC",
	"ZMA",
	"ZME",
	"ZMP",
	"ZNY",
	"ZOA",
	"ZOB",
	"ZSE",
	"ZTL",
}

func (v *NWSCenterWeatherServiceUnitId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NWSCenterWeatherServiceUnitId(value)
	for _, existing := range AllowedNWSCenterWeatherServiceUnitIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NWSCenterWeatherServiceUnitId", value)
}

// NewNWSCenterWeatherServiceUnitIdFromValue returns a pointer to a valid NWSCenterWeatherServiceUnitId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNWSCenterWeatherServiceUnitIdFromValue(v string) (*NWSCenterWeatherServiceUnitId, error) {
	ev := NWSCenterWeatherServiceUnitId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NWSCenterWeatherServiceUnitId: valid values are %v", v, AllowedNWSCenterWeatherServiceUnitIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NWSCenterWeatherServiceUnitId) IsValid() bool {
	for _, existing := range AllowedNWSCenterWeatherServiceUnitIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NWSCenterWeatherServiceUnitId value
func (v NWSCenterWeatherServiceUnitId) Ptr() *NWSCenterWeatherServiceUnitId {
	return &v
}

type NullableNWSCenterWeatherServiceUnitId struct {
	value *NWSCenterWeatherServiceUnitId
	isSet bool
}

func (v NullableNWSCenterWeatherServiceUnitId) Get() *NWSCenterWeatherServiceUnitId {
	return v.value
}

func (v *NullableNWSCenterWeatherServiceUnitId) Set(val *NWSCenterWeatherServiceUnitId) {
	v.value = val
	v.isSet = true
}

func (v NullableNWSCenterWeatherServiceUnitId) IsSet() bool {
	return v.isSet
}

func (v *NullableNWSCenterWeatherServiceUnitId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNWSCenterWeatherServiceUnitId(val *NWSCenterWeatherServiceUnitId) *NullableNWSCenterWeatherServiceUnitId {
	return &NullableNWSCenterWeatherServiceUnitId{value: val, isSet: true}
}

func (v NullableNWSCenterWeatherServiceUnitId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNWSCenterWeatherServiceUnitId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

