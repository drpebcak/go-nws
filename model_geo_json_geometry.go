/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// GeoJsonGeometry - A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format.
type GeoJsonGeometry struct {
	GeoJSONLineString *GeoJSONLineString
	GeoJSONMultiLineString *GeoJSONMultiLineString
	GeoJSONMultiPoint *GeoJSONMultiPoint
	GeoJSONMultiPolygon *GeoJSONMultiPolygon
	GeoJSONPoint *GeoJSONPoint
	GeoJSONPolygon *GeoJSONPolygon
}

// GeoJSONLineStringAsGeoJsonGeometry is a convenience function that returns GeoJSONLineString wrapped in GeoJsonGeometry
func GeoJSONLineStringAsGeoJsonGeometry(v *GeoJSONLineString) GeoJsonGeometry {
	return GeoJsonGeometry{
		GeoJSONLineString: v,
	}
}

// GeoJSONMultiLineStringAsGeoJsonGeometry is a convenience function that returns GeoJSONMultiLineString wrapped in GeoJsonGeometry
func GeoJSONMultiLineStringAsGeoJsonGeometry(v *GeoJSONMultiLineString) GeoJsonGeometry {
	return GeoJsonGeometry{
		GeoJSONMultiLineString: v,
	}
}

// GeoJSONMultiPointAsGeoJsonGeometry is a convenience function that returns GeoJSONMultiPoint wrapped in GeoJsonGeometry
func GeoJSONMultiPointAsGeoJsonGeometry(v *GeoJSONMultiPoint) GeoJsonGeometry {
	return GeoJsonGeometry{
		GeoJSONMultiPoint: v,
	}
}

// GeoJSONMultiPolygonAsGeoJsonGeometry is a convenience function that returns GeoJSONMultiPolygon wrapped in GeoJsonGeometry
func GeoJSONMultiPolygonAsGeoJsonGeometry(v *GeoJSONMultiPolygon) GeoJsonGeometry {
	return GeoJsonGeometry{
		GeoJSONMultiPolygon: v,
	}
}

// GeoJSONPointAsGeoJsonGeometry is a convenience function that returns GeoJSONPoint wrapped in GeoJsonGeometry
func GeoJSONPointAsGeoJsonGeometry(v *GeoJSONPoint) GeoJsonGeometry {
	return GeoJsonGeometry{
		GeoJSONPoint: v,
	}
}

// GeoJSONPolygonAsGeoJsonGeometry is a convenience function that returns GeoJSONPolygon wrapped in GeoJsonGeometry
func GeoJSONPolygonAsGeoJsonGeometry(v *GeoJSONPolygon) GeoJsonGeometry {
	return GeoJsonGeometry{
		GeoJSONPolygon: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *GeoJsonGeometry) UnmarshalJSON(data []byte) error {
	var err error
	// this object is nullable so check if the payload is null or empty string
	if string(data) == "" || string(data) == "{}" {
		return nil
	}

	match := 0
	// try to unmarshal data into GeoJSONLineString
	err = newStrictDecoder(data).Decode(&dst.GeoJSONLineString)
	if err == nil {
		jsonGeoJSONLineString, _ := json.Marshal(dst.GeoJSONLineString)
		if string(jsonGeoJSONLineString) == "{}" { // empty struct
			dst.GeoJSONLineString = nil
		} else {
			if err = validator.Validate(dst.GeoJSONLineString); err != nil {
				dst.GeoJSONLineString = nil
			} else {
				match++
			}
		}
	} else {
		dst.GeoJSONLineString = nil
	}

	// try to unmarshal data into GeoJSONMultiLineString
	err = newStrictDecoder(data).Decode(&dst.GeoJSONMultiLineString)
	if err == nil {
		jsonGeoJSONMultiLineString, _ := json.Marshal(dst.GeoJSONMultiLineString)
		if string(jsonGeoJSONMultiLineString) == "{}" { // empty struct
			dst.GeoJSONMultiLineString = nil
		} else {
			if err = validator.Validate(dst.GeoJSONMultiLineString); err != nil {
				dst.GeoJSONMultiLineString = nil
			} else {
				match++
			}
		}
	} else {
		dst.GeoJSONMultiLineString = nil
	}

	// try to unmarshal data into GeoJSONMultiPoint
	err = newStrictDecoder(data).Decode(&dst.GeoJSONMultiPoint)
	if err == nil {
		jsonGeoJSONMultiPoint, _ := json.Marshal(dst.GeoJSONMultiPoint)
		if string(jsonGeoJSONMultiPoint) == "{}" { // empty struct
			dst.GeoJSONMultiPoint = nil
		} else {
			if err = validator.Validate(dst.GeoJSONMultiPoint); err != nil {
				dst.GeoJSONMultiPoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.GeoJSONMultiPoint = nil
	}

	// try to unmarshal data into GeoJSONMultiPolygon
	err = newStrictDecoder(data).Decode(&dst.GeoJSONMultiPolygon)
	if err == nil {
		jsonGeoJSONMultiPolygon, _ := json.Marshal(dst.GeoJSONMultiPolygon)
		if string(jsonGeoJSONMultiPolygon) == "{}" { // empty struct
			dst.GeoJSONMultiPolygon = nil
		} else {
			if err = validator.Validate(dst.GeoJSONMultiPolygon); err != nil {
				dst.GeoJSONMultiPolygon = nil
			} else {
				match++
			}
		}
	} else {
		dst.GeoJSONMultiPolygon = nil
	}

	// try to unmarshal data into GeoJSONPoint
	err = newStrictDecoder(data).Decode(&dst.GeoJSONPoint)
	if err == nil {
		jsonGeoJSONPoint, _ := json.Marshal(dst.GeoJSONPoint)
		if string(jsonGeoJSONPoint) == "{}" { // empty struct
			dst.GeoJSONPoint = nil
		} else {
			if err = validator.Validate(dst.GeoJSONPoint); err != nil {
				dst.GeoJSONPoint = nil
			} else {
				match++
			}
		}
	} else {
		dst.GeoJSONPoint = nil
	}

	// try to unmarshal data into GeoJSONPolygon
	err = newStrictDecoder(data).Decode(&dst.GeoJSONPolygon)
	if err == nil {
		jsonGeoJSONPolygon, _ := json.Marshal(dst.GeoJSONPolygon)
		if string(jsonGeoJSONPolygon) == "{}" { // empty struct
			dst.GeoJSONPolygon = nil
		} else {
			if err = validator.Validate(dst.GeoJSONPolygon); err != nil {
				dst.GeoJSONPolygon = nil
			} else {
				match++
			}
		}
	} else {
		dst.GeoJSONPolygon = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.GeoJSONLineString = nil
		dst.GeoJSONMultiLineString = nil
		dst.GeoJSONMultiPoint = nil
		dst.GeoJSONMultiPolygon = nil
		dst.GeoJSONPoint = nil
		dst.GeoJSONPolygon = nil

		return fmt.Errorf("data matches more than one schema in oneOf(GeoJsonGeometry)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(GeoJsonGeometry)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src GeoJsonGeometry) MarshalJSON() ([]byte, error) {
	if src.GeoJSONLineString != nil {
		return json.Marshal(&src.GeoJSONLineString)
	}

	if src.GeoJSONMultiLineString != nil {
		return json.Marshal(&src.GeoJSONMultiLineString)
	}

	if src.GeoJSONMultiPoint != nil {
		return json.Marshal(&src.GeoJSONMultiPoint)
	}

	if src.GeoJSONMultiPolygon != nil {
		return json.Marshal(&src.GeoJSONMultiPolygon)
	}

	if src.GeoJSONPoint != nil {
		return json.Marshal(&src.GeoJSONPoint)
	}

	if src.GeoJSONPolygon != nil {
		return json.Marshal(&src.GeoJSONPolygon)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *GeoJsonGeometry) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.GeoJSONLineString != nil {
		return obj.GeoJSONLineString
	}

	if obj.GeoJSONMultiLineString != nil {
		return obj.GeoJSONMultiLineString
	}

	if obj.GeoJSONMultiPoint != nil {
		return obj.GeoJSONMultiPoint
	}

	if obj.GeoJSONMultiPolygon != nil {
		return obj.GeoJSONMultiPolygon
	}

	if obj.GeoJSONPoint != nil {
		return obj.GeoJSONPoint
	}

	if obj.GeoJSONPolygon != nil {
		return obj.GeoJSONPolygon
	}

	// all schemas are nil
	return nil
}

type NullableGeoJsonGeometry struct {
	value *GeoJsonGeometry
	isSet bool
}

func (v NullableGeoJsonGeometry) Get() *GeoJsonGeometry {
	return v.value
}

func (v *NullableGeoJsonGeometry) Set(val *GeoJsonGeometry) {
	v.value = val
	v.isSet = true
}

func (v NullableGeoJsonGeometry) IsSet() bool {
	return v.isSet
}

func (v *NullableGeoJsonGeometry) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGeoJsonGeometry(val *GeoJsonGeometry) *NullableGeoJsonGeometry {
	return &NullableGeoJsonGeometry{value: val, isSet: true}
}

func (v NullableGeoJsonGeometry) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGeoJsonGeometry) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


