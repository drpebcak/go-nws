/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Sigmet type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Sigmet{}

// Sigmet struct for Sigmet
type Sigmet struct {
	Id *string `json:"id,omitempty"`
	IssueTime *time.Time `json:"issueTime,omitempty"`
	Fir NullableString `json:"fir,omitempty"`
	// ATSU Identifier
	Atsu *string `json:"atsu,omitempty" validate:"regexp=^[A-Z]{3,4}$"`
	Sequence NullableString `json:"sequence,omitempty"`
	Phenomenon NullableString `json:"phenomenon,omitempty"`
	Start *time.Time `json:"start,omitempty"`
	End *time.Time `json:"end,omitempty"`
}

// NewSigmet instantiates a new Sigmet object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewSigmet() *Sigmet {
	this := Sigmet{}
	return &this
}

// NewSigmetWithDefaults instantiates a new Sigmet object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewSigmetWithDefaults() *Sigmet {
	this := Sigmet{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Sigmet) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sigmet) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Sigmet) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Sigmet) SetId(v string) {
	o.Id = &v
}

// GetIssueTime returns the IssueTime field value if set, zero value otherwise.
func (o *Sigmet) GetIssueTime() time.Time {
	if o == nil || IsNil(o.IssueTime) {
		var ret time.Time
		return ret
	}
	return *o.IssueTime
}

// GetIssueTimeOk returns a tuple with the IssueTime field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sigmet) GetIssueTimeOk() (*time.Time, bool) {
	if o == nil || IsNil(o.IssueTime) {
		return nil, false
	}
	return o.IssueTime, true
}

// HasIssueTime returns a boolean if a field has been set.
func (o *Sigmet) HasIssueTime() bool {
	if o != nil && !IsNil(o.IssueTime) {
		return true
	}

	return false
}

// SetIssueTime gets a reference to the given time.Time and assigns it to the IssueTime field.
func (o *Sigmet) SetIssueTime(v time.Time) {
	o.IssueTime = &v
}

// GetFir returns the Fir field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Sigmet) GetFir() string {
	if o == nil || IsNil(o.Fir.Get()) {
		var ret string
		return ret
	}
	return *o.Fir.Get()
}

// GetFirOk returns a tuple with the Fir field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Sigmet) GetFirOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Fir.Get(), o.Fir.IsSet()
}

// HasFir returns a boolean if a field has been set.
func (o *Sigmet) HasFir() bool {
	if o != nil && o.Fir.IsSet() {
		return true
	}

	return false
}

// SetFir gets a reference to the given NullableString and assigns it to the Fir field.
func (o *Sigmet) SetFir(v string) {
	o.Fir.Set(&v)
}
// SetFirNil sets the value for Fir to be an explicit nil
func (o *Sigmet) SetFirNil() {
	o.Fir.Set(nil)
}

// UnsetFir ensures that no value is present for Fir, not even an explicit nil
func (o *Sigmet) UnsetFir() {
	o.Fir.Unset()
}

// GetAtsu returns the Atsu field value if set, zero value otherwise.
func (o *Sigmet) GetAtsu() string {
	if o == nil || IsNil(o.Atsu) {
		var ret string
		return ret
	}
	return *o.Atsu
}

// GetAtsuOk returns a tuple with the Atsu field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sigmet) GetAtsuOk() (*string, bool) {
	if o == nil || IsNil(o.Atsu) {
		return nil, false
	}
	return o.Atsu, true
}

// HasAtsu returns a boolean if a field has been set.
func (o *Sigmet) HasAtsu() bool {
	if o != nil && !IsNil(o.Atsu) {
		return true
	}

	return false
}

// SetAtsu gets a reference to the given string and assigns it to the Atsu field.
func (o *Sigmet) SetAtsu(v string) {
	o.Atsu = &v
}

// GetSequence returns the Sequence field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Sigmet) GetSequence() string {
	if o == nil || IsNil(o.Sequence.Get()) {
		var ret string
		return ret
	}
	return *o.Sequence.Get()
}

// GetSequenceOk returns a tuple with the Sequence field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Sigmet) GetSequenceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Sequence.Get(), o.Sequence.IsSet()
}

// HasSequence returns a boolean if a field has been set.
func (o *Sigmet) HasSequence() bool {
	if o != nil && o.Sequence.IsSet() {
		return true
	}

	return false
}

// SetSequence gets a reference to the given NullableString and assigns it to the Sequence field.
func (o *Sigmet) SetSequence(v string) {
	o.Sequence.Set(&v)
}
// SetSequenceNil sets the value for Sequence to be an explicit nil
func (o *Sigmet) SetSequenceNil() {
	o.Sequence.Set(nil)
}

// UnsetSequence ensures that no value is present for Sequence, not even an explicit nil
func (o *Sigmet) UnsetSequence() {
	o.Sequence.Unset()
}

// GetPhenomenon returns the Phenomenon field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Sigmet) GetPhenomenon() string {
	if o == nil || IsNil(o.Phenomenon.Get()) {
		var ret string
		return ret
	}
	return *o.Phenomenon.Get()
}

// GetPhenomenonOk returns a tuple with the Phenomenon field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Sigmet) GetPhenomenonOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Phenomenon.Get(), o.Phenomenon.IsSet()
}

// HasPhenomenon returns a boolean if a field has been set.
func (o *Sigmet) HasPhenomenon() bool {
	if o != nil && o.Phenomenon.IsSet() {
		return true
	}

	return false
}

// SetPhenomenon gets a reference to the given NullableString and assigns it to the Phenomenon field.
func (o *Sigmet) SetPhenomenon(v string) {
	o.Phenomenon.Set(&v)
}
// SetPhenomenonNil sets the value for Phenomenon to be an explicit nil
func (o *Sigmet) SetPhenomenonNil() {
	o.Phenomenon.Set(nil)
}

// UnsetPhenomenon ensures that no value is present for Phenomenon, not even an explicit nil
func (o *Sigmet) UnsetPhenomenon() {
	o.Phenomenon.Unset()
}

// GetStart returns the Start field value if set, zero value otherwise.
func (o *Sigmet) GetStart() time.Time {
	if o == nil || IsNil(o.Start) {
		var ret time.Time
		return ret
	}
	return *o.Start
}

// GetStartOk returns a tuple with the Start field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sigmet) GetStartOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Start) {
		return nil, false
	}
	return o.Start, true
}

// HasStart returns a boolean if a field has been set.
func (o *Sigmet) HasStart() bool {
	if o != nil && !IsNil(o.Start) {
		return true
	}

	return false
}

// SetStart gets a reference to the given time.Time and assigns it to the Start field.
func (o *Sigmet) SetStart(v time.Time) {
	o.Start = &v
}

// GetEnd returns the End field value if set, zero value otherwise.
func (o *Sigmet) GetEnd() time.Time {
	if o == nil || IsNil(o.End) {
		var ret time.Time
		return ret
	}
	return *o.End
}

// GetEndOk returns a tuple with the End field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Sigmet) GetEndOk() (*time.Time, bool) {
	if o == nil || IsNil(o.End) {
		return nil, false
	}
	return o.End, true
}

// HasEnd returns a boolean if a field has been set.
func (o *Sigmet) HasEnd() bool {
	if o != nil && !IsNil(o.End) {
		return true
	}

	return false
}

// SetEnd gets a reference to the given time.Time and assigns it to the End field.
func (o *Sigmet) SetEnd(v time.Time) {
	o.End = &v
}

func (o Sigmet) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Sigmet) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.IssueTime) {
		toSerialize["issueTime"] = o.IssueTime
	}
	if o.Fir.IsSet() {
		toSerialize["fir"] = o.Fir.Get()
	}
	if !IsNil(o.Atsu) {
		toSerialize["atsu"] = o.Atsu
	}
	if o.Sequence.IsSet() {
		toSerialize["sequence"] = o.Sequence.Get()
	}
	if o.Phenomenon.IsSet() {
		toSerialize["phenomenon"] = o.Phenomenon.Get()
	}
	if !IsNil(o.Start) {
		toSerialize["start"] = o.Start
	}
	if !IsNil(o.End) {
		toSerialize["end"] = o.End
	}
	return toSerialize, nil
}

type NullableSigmet struct {
	value *Sigmet
	isSet bool
}

func (v NullableSigmet) Get() *Sigmet {
	return v.value
}

func (v *NullableSigmet) Set(val *Sigmet) {
	v.value = val
	v.isSet = true
}

func (v NullableSigmet) IsSet() bool {
	return v.isSet
}

func (v *NullableSigmet) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableSigmet(val *Sigmet) *NullableSigmet {
	return &NullableSigmet{value: val, isSet: true}
}

func (v NullableSigmet) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableSigmet) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


