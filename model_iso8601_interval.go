/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// ISO8601Interval - A time interval in ISO 8601 format. This can be one of:      1. Start and end time     2. Start time and duration     3. Duration and end time The string \"NOW\" can also be used in place of a start/end time. 
type ISO8601Interval struct {
	String *string
}

// stringAsISO8601Interval is a convenience function that returns string wrapped in ISO8601Interval
func StringAsISO8601Interval(v *string) ISO8601Interval {
	return ISO8601Interval{
		String: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *ISO8601Interval) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into String
	err = newStrictDecoder(data).Decode(&dst.String)
	if err == nil {
		jsonString, _ := json.Marshal(dst.String)
		if string(jsonString) == "{}" { // empty struct
			dst.String = nil
		} else {
			if err = validator.Validate(dst.String); err != nil {
				dst.String = nil
			} else {
				match++
			}
		}
	} else {
		dst.String = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.String = nil

		return fmt.Errorf("data matches more than one schema in oneOf(ISO8601Interval)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(ISO8601Interval)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src ISO8601Interval) MarshalJSON() ([]byte, error) {
	if src.String != nil {
		return json.Marshal(&src.String)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *ISO8601Interval) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.String != nil {
		return obj.String
	}

	// all schemas are nil
	return nil
}

type NullableISO8601Interval struct {
	value *ISO8601Interval
	isSet bool
}

func (v NullableISO8601Interval) Get() *ISO8601Interval {
	return v.value
}

func (v *NullableISO8601Interval) Set(val *ISO8601Interval) {
	v.value = val
	v.isSet = true
}

func (v NullableISO8601Interval) IsSet() bool {
	return v.isSet
}

func (v *NullableISO8601Interval) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableISO8601Interval(val *ISO8601Interval) *NullableISO8601Interval {
	return &NullableISO8601Interval{value: val, isSet: true}
}

func (v NullableISO8601Interval) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableISO8601Interval) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


