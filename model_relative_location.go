/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the RelativeLocation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &RelativeLocation{}

// RelativeLocation struct for RelativeLocation
type RelativeLocation struct {
	City *string `json:"city,omitempty"`
	State *string `json:"state,omitempty"`
	Distance *QuantitativeValue `json:"distance,omitempty"`
	Bearing *QuantitativeValue `json:"bearing,omitempty"`
}

// NewRelativeLocation instantiates a new RelativeLocation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewRelativeLocation() *RelativeLocation {
	this := RelativeLocation{}
	return &this
}

// NewRelativeLocationWithDefaults instantiates a new RelativeLocation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewRelativeLocationWithDefaults() *RelativeLocation {
	this := RelativeLocation{}
	return &this
}

// GetCity returns the City field value if set, zero value otherwise.
func (o *RelativeLocation) GetCity() string {
	if o == nil || IsNil(o.City) {
		var ret string
		return ret
	}
	return *o.City
}

// GetCityOk returns a tuple with the City field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeLocation) GetCityOk() (*string, bool) {
	if o == nil || IsNil(o.City) {
		return nil, false
	}
	return o.City, true
}

// HasCity returns a boolean if a field has been set.
func (o *RelativeLocation) HasCity() bool {
	if o != nil && !IsNil(o.City) {
		return true
	}

	return false
}

// SetCity gets a reference to the given string and assigns it to the City field.
func (o *RelativeLocation) SetCity(v string) {
	o.City = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *RelativeLocation) GetState() string {
	if o == nil || IsNil(o.State) {
		var ret string
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeLocation) GetStateOk() (*string, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *RelativeLocation) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given string and assigns it to the State field.
func (o *RelativeLocation) SetState(v string) {
	o.State = &v
}

// GetDistance returns the Distance field value if set, zero value otherwise.
func (o *RelativeLocation) GetDistance() QuantitativeValue {
	if o == nil || IsNil(o.Distance) {
		var ret QuantitativeValue
		return ret
	}
	return *o.Distance
}

// GetDistanceOk returns a tuple with the Distance field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeLocation) GetDistanceOk() (*QuantitativeValue, bool) {
	if o == nil || IsNil(o.Distance) {
		return nil, false
	}
	return o.Distance, true
}

// HasDistance returns a boolean if a field has been set.
func (o *RelativeLocation) HasDistance() bool {
	if o != nil && !IsNil(o.Distance) {
		return true
	}

	return false
}

// SetDistance gets a reference to the given QuantitativeValue and assigns it to the Distance field.
func (o *RelativeLocation) SetDistance(v QuantitativeValue) {
	o.Distance = &v
}

// GetBearing returns the Bearing field value if set, zero value otherwise.
func (o *RelativeLocation) GetBearing() QuantitativeValue {
	if o == nil || IsNil(o.Bearing) {
		var ret QuantitativeValue
		return ret
	}
	return *o.Bearing
}

// GetBearingOk returns a tuple with the Bearing field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *RelativeLocation) GetBearingOk() (*QuantitativeValue, bool) {
	if o == nil || IsNil(o.Bearing) {
		return nil, false
	}
	return o.Bearing, true
}

// HasBearing returns a boolean if a field has been set.
func (o *RelativeLocation) HasBearing() bool {
	if o != nil && !IsNil(o.Bearing) {
		return true
	}

	return false
}

// SetBearing gets a reference to the given QuantitativeValue and assigns it to the Bearing field.
func (o *RelativeLocation) SetBearing(v QuantitativeValue) {
	o.Bearing = &v
}

func (o RelativeLocation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o RelativeLocation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.City) {
		toSerialize["city"] = o.City
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.Distance) {
		toSerialize["distance"] = o.Distance
	}
	if !IsNil(o.Bearing) {
		toSerialize["bearing"] = o.Bearing
	}
	return toSerialize, nil
}

type NullableRelativeLocation struct {
	value *RelativeLocation
	isSet bool
}

func (v NullableRelativeLocation) Get() *RelativeLocation {
	return v.value
}

func (v *NullableRelativeLocation) Set(val *RelativeLocation) {
	v.value = val
	v.isSet = true
}

func (v NullableRelativeLocation) IsSet() bool {
	return v.isSet
}

func (v *NullableRelativeLocation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRelativeLocation(val *RelativeLocation) *NullableRelativeLocation {
	return &NullableRelativeLocation{value: val, isSet: true}
}

func (v NullableRelativeLocation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRelativeLocation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


