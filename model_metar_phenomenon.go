/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the MetarPhenomenon type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &MetarPhenomenon{}

// MetarPhenomenon An object representing a decoded METAR phenomenon string.
type MetarPhenomenon struct {
	Intensity NullableString `json:"intensity"`
	Modifier NullableString `json:"modifier"`
	Weather string `json:"weather"`
	RawString string `json:"rawString"`
	InVicinity *bool `json:"inVicinity,omitempty"`
}

type _MetarPhenomenon MetarPhenomenon

// NewMetarPhenomenon instantiates a new MetarPhenomenon object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewMetarPhenomenon(intensity NullableString, modifier NullableString, weather string, rawString string) *MetarPhenomenon {
	this := MetarPhenomenon{}
	this.Intensity = intensity
	this.Modifier = modifier
	this.Weather = weather
	this.RawString = rawString
	return &this
}

// NewMetarPhenomenonWithDefaults instantiates a new MetarPhenomenon object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewMetarPhenomenonWithDefaults() *MetarPhenomenon {
	this := MetarPhenomenon{}
	return &this
}

// GetIntensity returns the Intensity field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MetarPhenomenon) GetIntensity() string {
	if o == nil || o.Intensity.Get() == nil {
		var ret string
		return ret
	}

	return *o.Intensity.Get()
}

// GetIntensityOk returns a tuple with the Intensity field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetarPhenomenon) GetIntensityOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Intensity.Get(), o.Intensity.IsSet()
}

// SetIntensity sets field value
func (o *MetarPhenomenon) SetIntensity(v string) {
	o.Intensity.Set(&v)
}

// GetModifier returns the Modifier field value
// If the value is explicit nil, the zero value for string will be returned
func (o *MetarPhenomenon) GetModifier() string {
	if o == nil || o.Modifier.Get() == nil {
		var ret string
		return ret
	}

	return *o.Modifier.Get()
}

// GetModifierOk returns a tuple with the Modifier field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *MetarPhenomenon) GetModifierOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Modifier.Get(), o.Modifier.IsSet()
}

// SetModifier sets field value
func (o *MetarPhenomenon) SetModifier(v string) {
	o.Modifier.Set(&v)
}

// GetWeather returns the Weather field value
func (o *MetarPhenomenon) GetWeather() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Weather
}

// GetWeatherOk returns a tuple with the Weather field value
// and a boolean to check if the value has been set.
func (o *MetarPhenomenon) GetWeatherOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Weather, true
}

// SetWeather sets field value
func (o *MetarPhenomenon) SetWeather(v string) {
	o.Weather = v
}

// GetRawString returns the RawString field value
func (o *MetarPhenomenon) GetRawString() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.RawString
}

// GetRawStringOk returns a tuple with the RawString field value
// and a boolean to check if the value has been set.
func (o *MetarPhenomenon) GetRawStringOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.RawString, true
}

// SetRawString sets field value
func (o *MetarPhenomenon) SetRawString(v string) {
	o.RawString = v
}

// GetInVicinity returns the InVicinity field value if set, zero value otherwise.
func (o *MetarPhenomenon) GetInVicinity() bool {
	if o == nil || IsNil(o.InVicinity) {
		var ret bool
		return ret
	}
	return *o.InVicinity
}

// GetInVicinityOk returns a tuple with the InVicinity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *MetarPhenomenon) GetInVicinityOk() (*bool, bool) {
	if o == nil || IsNil(o.InVicinity) {
		return nil, false
	}
	return o.InVicinity, true
}

// HasInVicinity returns a boolean if a field has been set.
func (o *MetarPhenomenon) HasInVicinity() bool {
	if o != nil && !IsNil(o.InVicinity) {
		return true
	}

	return false
}

// SetInVicinity gets a reference to the given bool and assigns it to the InVicinity field.
func (o *MetarPhenomenon) SetInVicinity(v bool) {
	o.InVicinity = &v
}

func (o MetarPhenomenon) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o MetarPhenomenon) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["intensity"] = o.Intensity.Get()
	toSerialize["modifier"] = o.Modifier.Get()
	toSerialize["weather"] = o.Weather
	toSerialize["rawString"] = o.RawString
	if !IsNil(o.InVicinity) {
		toSerialize["inVicinity"] = o.InVicinity
	}
	return toSerialize, nil
}

func (o *MetarPhenomenon) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"intensity",
		"modifier",
		"weather",
		"rawString",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varMetarPhenomenon := _MetarPhenomenon{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varMetarPhenomenon)

	if err != nil {
		return err
	}

	*o = MetarPhenomenon(varMetarPhenomenon)

	return err
}

type NullableMetarPhenomenon struct {
	value *MetarPhenomenon
	isSet bool
}

func (v NullableMetarPhenomenon) Get() *MetarPhenomenon {
	return v.value
}

func (v *NullableMetarPhenomenon) Set(val *MetarPhenomenon) {
	v.value = val
	v.isSet = true
}

func (v NullableMetarPhenomenon) IsSet() bool {
	return v.isSet
}

func (v *NullableMetarPhenomenon) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetarPhenomenon(val *MetarPhenomenon) *NullableMetarPhenomenon {
	return &NullableMetarPhenomenon{value: val, isSet: true}
}

func (v NullableMetarPhenomenon) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetarPhenomenon) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


