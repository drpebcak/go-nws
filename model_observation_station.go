/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the ObservationStation type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationStation{}

// ObservationStation struct for ObservationStation
type ObservationStation struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	// A geometry represented in Well-Known Text (WKT) format.
	Geometry NullableString `json:"geometry,omitempty"`
	Id *string `json:"@id,omitempty"`
	Type *string `json:"@type,omitempty"`
	Elevation *QuantitativeValue `json:"elevation,omitempty"`
	StationIdentifier *string `json:"stationIdentifier,omitempty"`
	Name *string `json:"name,omitempty"`
	TimeZone *string `json:"timeZone,omitempty"`
	// A link to the NWS public forecast zone containing this station.
	Forecast *string `json:"forecast,omitempty"`
	// A link to the NWS county zone containing this station.
	County *string `json:"county,omitempty"`
	// A link to the NWS fire weather forecast zone containing this station.
	FireWeatherZone *string `json:"fireWeatherZone,omitempty"`
}

// NewObservationStation instantiates a new ObservationStation object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationStation() *ObservationStation {
	this := ObservationStation{}
	return &this
}

// NewObservationStationWithDefaults instantiates a new ObservationStation object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationStationWithDefaults() *ObservationStation {
	this := ObservationStation{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ObservationStation) GetContext() JsonLdContext {
	if o == nil || IsNil(o.Context) {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ObservationStation) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *ObservationStation) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ObservationStation) GetGeometry() string {
	if o == nil || IsNil(o.Geometry.Get()) {
		var ret string
		return ret
	}
	return *o.Geometry.Get()
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObservationStation) GetGeometryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geometry.Get(), o.Geometry.IsSet()
}

// HasGeometry returns a boolean if a field has been set.
func (o *ObservationStation) HasGeometry() bool {
	if o != nil && o.Geometry.IsSet() {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given NullableString and assigns it to the Geometry field.
func (o *ObservationStation) SetGeometry(v string) {
	o.Geometry.Set(&v)
}
// SetGeometryNil sets the value for Geometry to be an explicit nil
func (o *ObservationStation) SetGeometryNil() {
	o.Geometry.Set(nil)
}

// UnsetGeometry ensures that no value is present for Geometry, not even an explicit nil
func (o *ObservationStation) UnsetGeometry() {
	o.Geometry.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObservationStation) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObservationStation) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ObservationStation) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ObservationStation) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ObservationStation) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ObservationStation) SetType(v string) {
	o.Type = &v
}

// GetElevation returns the Elevation field value if set, zero value otherwise.
func (o *ObservationStation) GetElevation() QuantitativeValue {
	if o == nil || IsNil(o.Elevation) {
		var ret QuantitativeValue
		return ret
	}
	return *o.Elevation
}

// GetElevationOk returns a tuple with the Elevation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetElevationOk() (*QuantitativeValue, bool) {
	if o == nil || IsNil(o.Elevation) {
		return nil, false
	}
	return o.Elevation, true
}

// HasElevation returns a boolean if a field has been set.
func (o *ObservationStation) HasElevation() bool {
	if o != nil && !IsNil(o.Elevation) {
		return true
	}

	return false
}

// SetElevation gets a reference to the given QuantitativeValue and assigns it to the Elevation field.
func (o *ObservationStation) SetElevation(v QuantitativeValue) {
	o.Elevation = &v
}

// GetStationIdentifier returns the StationIdentifier field value if set, zero value otherwise.
func (o *ObservationStation) GetStationIdentifier() string {
	if o == nil || IsNil(o.StationIdentifier) {
		var ret string
		return ret
	}
	return *o.StationIdentifier
}

// GetStationIdentifierOk returns a tuple with the StationIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetStationIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.StationIdentifier) {
		return nil, false
	}
	return o.StationIdentifier, true
}

// HasStationIdentifier returns a boolean if a field has been set.
func (o *ObservationStation) HasStationIdentifier() bool {
	if o != nil && !IsNil(o.StationIdentifier) {
		return true
	}

	return false
}

// SetStationIdentifier gets a reference to the given string and assigns it to the StationIdentifier field.
func (o *ObservationStation) SetStationIdentifier(v string) {
	o.StationIdentifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObservationStation) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObservationStation) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObservationStation) SetName(v string) {
	o.Name = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *ObservationStation) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *ObservationStation) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *ObservationStation) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetForecast returns the Forecast field value if set, zero value otherwise.
func (o *ObservationStation) GetForecast() string {
	if o == nil || IsNil(o.Forecast) {
		var ret string
		return ret
	}
	return *o.Forecast
}

// GetForecastOk returns a tuple with the Forecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetForecastOk() (*string, bool) {
	if o == nil || IsNil(o.Forecast) {
		return nil, false
	}
	return o.Forecast, true
}

// HasForecast returns a boolean if a field has been set.
func (o *ObservationStation) HasForecast() bool {
	if o != nil && !IsNil(o.Forecast) {
		return true
	}

	return false
}

// SetForecast gets a reference to the given string and assigns it to the Forecast field.
func (o *ObservationStation) SetForecast(v string) {
	o.Forecast = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *ObservationStation) GetCounty() string {
	if o == nil || IsNil(o.County) {
		var ret string
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetCountyOk() (*string, bool) {
	if o == nil || IsNil(o.County) {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *ObservationStation) HasCounty() bool {
	if o != nil && !IsNil(o.County) {
		return true
	}

	return false
}

// SetCounty gets a reference to the given string and assigns it to the County field.
func (o *ObservationStation) SetCounty(v string) {
	o.County = &v
}

// GetFireWeatherZone returns the FireWeatherZone field value if set, zero value otherwise.
func (o *ObservationStation) GetFireWeatherZone() string {
	if o == nil || IsNil(o.FireWeatherZone) {
		var ret string
		return ret
	}
	return *o.FireWeatherZone
}

// GetFireWeatherZoneOk returns a tuple with the FireWeatherZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStation) GetFireWeatherZoneOk() (*string, bool) {
	if o == nil || IsNil(o.FireWeatherZone) {
		return nil, false
	}
	return o.FireWeatherZone, true
}

// HasFireWeatherZone returns a boolean if a field has been set.
func (o *ObservationStation) HasFireWeatherZone() bool {
	if o != nil && !IsNil(o.FireWeatherZone) {
		return true
	}

	return false
}

// SetFireWeatherZone gets a reference to the given string and assigns it to the FireWeatherZone field.
func (o *ObservationStation) SetFireWeatherZone(v string) {
	o.FireWeatherZone = &v
}

func (o ObservationStation) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationStation) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["@context"] = o.Context
	}
	if o.Geometry.IsSet() {
		toSerialize["geometry"] = o.Geometry.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["@id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if !IsNil(o.Elevation) {
		toSerialize["elevation"] = o.Elevation
	}
	if !IsNil(o.StationIdentifier) {
		toSerialize["stationIdentifier"] = o.StationIdentifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.Forecast) {
		toSerialize["forecast"] = o.Forecast
	}
	if !IsNil(o.County) {
		toSerialize["county"] = o.County
	}
	if !IsNil(o.FireWeatherZone) {
		toSerialize["fireWeatherZone"] = o.FireWeatherZone
	}
	return toSerialize, nil
}

type NullableObservationStation struct {
	value *ObservationStation
	isSet bool
}

func (v NullableObservationStation) Get() *ObservationStation {
	return v.value
}

func (v *NullableObservationStation) Set(val *ObservationStation) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationStation) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationStation) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationStation(val *ObservationStation) *NullableObservationStation {
	return &NullableObservationStation{value: val, isSet: true}
}

func (v NullableObservationStation) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationStation) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


