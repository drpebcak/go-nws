/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Glossary200Response type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Glossary200Response{}

// Glossary200Response struct for Glossary200Response
type Glossary200Response struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	// A list of glossary terms
	Glossary []Glossary200ResponseGlossaryInner `json:"glossary,omitempty"`
}

// NewGlossary200Response instantiates a new Glossary200Response object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGlossary200Response() *Glossary200Response {
	this := Glossary200Response{}
	return &this
}

// NewGlossary200ResponseWithDefaults instantiates a new Glossary200Response object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGlossary200ResponseWithDefaults() *Glossary200Response {
	this := Glossary200Response{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Glossary200Response) GetContext() JsonLdContext {
	if o == nil || IsNil(o.Context) {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary200Response) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Glossary200Response) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *Glossary200Response) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetGlossary returns the Glossary field value if set, zero value otherwise.
func (o *Glossary200Response) GetGlossary() []Glossary200ResponseGlossaryInner {
	if o == nil || IsNil(o.Glossary) {
		var ret []Glossary200ResponseGlossaryInner
		return ret
	}
	return o.Glossary
}

// GetGlossaryOk returns a tuple with the Glossary field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Glossary200Response) GetGlossaryOk() ([]Glossary200ResponseGlossaryInner, bool) {
	if o == nil || IsNil(o.Glossary) {
		return nil, false
	}
	return o.Glossary, true
}

// HasGlossary returns a boolean if a field has been set.
func (o *Glossary200Response) HasGlossary() bool {
	if o != nil && !IsNil(o.Glossary) {
		return true
	}

	return false
}

// SetGlossary gets a reference to the given []Glossary200ResponseGlossaryInner and assigns it to the Glossary field.
func (o *Glossary200Response) SetGlossary(v []Glossary200ResponseGlossaryInner) {
	o.Glossary = v
}

func (o Glossary200Response) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Glossary200Response) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["@context"] = o.Context
	}
	if !IsNil(o.Glossary) {
		toSerialize["glossary"] = o.Glossary
	}
	return toSerialize, nil
}

type NullableGlossary200Response struct {
	value *Glossary200Response
	isSet bool
}

func (v NullableGlossary200Response) Get() *Glossary200Response {
	return v.value
}

func (v *NullableGlossary200Response) Set(val *Glossary200Response) {
	v.value = val
	v.isSet = true
}

func (v NullableGlossary200Response) IsSet() bool {
	return v.isSet
}

func (v *NullableGlossary200Response) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGlossary200Response(val *Glossary200Response) *NullableGlossary200Response {
	return &NullableGlossary200Response{value: val, isSet: true}
}

func (v NullableGlossary200Response) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGlossary200Response) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


