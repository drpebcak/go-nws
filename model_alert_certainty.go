/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AlertCertainty the model 'AlertCertainty'
type AlertCertainty string

// List of AlertCertainty
const (
	OBSERVED AlertCertainty = "Observed"
	LIKELY AlertCertainty = "Likely"
	POSSIBLE AlertCertainty = "Possible"
	UNLIKELY AlertCertainty = "Unlikely"
	UNKNOWN AlertCertainty = "Unknown"
)

// All allowed values of AlertCertainty enum
var AllowedAlertCertaintyEnumValues = []AlertCertainty{
	"Observed",
	"Likely",
	"Possible",
	"Unlikely",
	"Unknown",
}

func (v *AlertCertainty) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertCertainty(value)
	for _, existing := range AllowedAlertCertaintyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertCertainty", value)
}

// NewAlertCertaintyFromValue returns a pointer to a valid AlertCertainty
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertCertaintyFromValue(v string) (*AlertCertainty, error) {
	ev := AlertCertainty(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertCertainty: valid values are %v", v, AllowedAlertCertaintyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertCertainty) IsValid() bool {
	for _, existing := range AllowedAlertCertaintyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertCertainty value
func (v AlertCertainty) Ptr() *AlertCertainty {
	return &v
}

type NullableAlertCertainty struct {
	value *AlertCertainty
	isSet bool
}

func (v NullableAlertCertainty) Get() *AlertCertainty {
	return v.value
}

func (v *NullableAlertCertainty) Set(val *AlertCertainty) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertCertainty) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertCertainty) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertCertainty(val *AlertCertainty) *NullableAlertCertainty {
	return &NullableAlertCertainty{value: val, isSet: true}
}

func (v NullableAlertCertainty) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertCertainty) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

