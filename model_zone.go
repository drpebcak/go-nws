/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Zone type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Zone{}

// Zone struct for Zone
type Zone struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	// A geometry represented in Well-Known Text (WKT) format.
	Geometry NullableString `json:"geometry,omitempty"`
	Id *string `json:"@id,omitempty"`
	Type *string `json:"@type,omitempty"`
	// UGC identifier for a NWS forecast zone or county. The first two letters will correspond to either a state code or marine area code (see #/components/schemas/StateTerritoryCode and #/components/schemas/MarineAreaCode for lists of valid letter combinations). The third letter will be Z for public/fire zone or C for county. 
	Id *string `json:"id,omitempty" validate:"regexp=^(A[KLMNRSZ]|C[AOT]|D[CE]|F[LM]|G[AMU]|I[ADLN]|K[SY]|L[ACEHMOS]|M[ADEHINOPST]|N[CDEHJMVY]|O[HKR]|P[AHKMRSWZ]|S[CDL]|T[NX]|UT|V[AIT]|W[AIVY]|[HR]I)[CZ]\\\\d{3}$"`
	Type *NWSZoneType `json:"type,omitempty"`
	Name *string `json:"name,omitempty"`
	EffectiveDate *time.Time `json:"effectiveDate,omitempty"`
	ExpirationDate *time.Time `json:"expirationDate,omitempty"`
	State *ZoneState `json:"state,omitempty"`
	ForecastOffice *string `json:"forecastOffice,omitempty"`
	GridIdentifier *string `json:"gridIdentifier,omitempty"`
	AwipsLocationIdentifier *string `json:"awipsLocationIdentifier,omitempty"`
	// Deprecated
	Cwa []NWSForecastOfficeId `json:"cwa,omitempty"`
	// Deprecated
	ForecastOffices []string `json:"forecastOffices,omitempty"`
	TimeZone []string `json:"timeZone,omitempty"`
	ObservationStations []string `json:"observationStations,omitempty"`
	RadarStation NullableString `json:"radarStation,omitempty"`
}

// NewZone instantiates a new Zone object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZone() *Zone {
	this := Zone{}
	return &this
}

// NewZoneWithDefaults instantiates a new Zone object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneWithDefaults() *Zone {
	this := Zone{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Zone) GetContext() JsonLdContext {
	if o == nil || IsNil(o.Context) {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Zone) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *Zone) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Zone) GetGeometry() string {
	if o == nil || IsNil(o.Geometry.Get()) {
		var ret string
		return ret
	}
	return *o.Geometry.Get()
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Zone) GetGeometryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geometry.Get(), o.Geometry.IsSet()
}

// HasGeometry returns a boolean if a field has been set.
func (o *Zone) HasGeometry() bool {
	if o != nil && o.Geometry.IsSet() {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given NullableString and assigns it to the Geometry field.
func (o *Zone) SetGeometry(v string) {
	o.Geometry.Set(&v)
}
// SetGeometryNil sets the value for Geometry to be an explicit nil
func (o *Zone) SetGeometryNil() {
	o.Geometry.Set(nil)
}

// UnsetGeometry ensures that no value is present for Geometry, not even an explicit nil
func (o *Zone) UnsetGeometry() {
	o.Geometry.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Zone) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Zone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Zone) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Zone) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Zone) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Zone) SetType(v string) {
	o.Type = &v
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Zone) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Zone) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Zone) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Zone) GetType() NWSZoneType {
	if o == nil || IsNil(o.Type) {
		var ret NWSZoneType
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetTypeOk() (*NWSZoneType, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Zone) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given NWSZoneType and assigns it to the Type field.
func (o *Zone) SetType(v NWSZoneType) {
	o.Type = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *Zone) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *Zone) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *Zone) SetName(v string) {
	o.Name = &v
}

// GetEffectiveDate returns the EffectiveDate field value if set, zero value otherwise.
func (o *Zone) GetEffectiveDate() time.Time {
	if o == nil || IsNil(o.EffectiveDate) {
		var ret time.Time
		return ret
	}
	return *o.EffectiveDate
}

// GetEffectiveDateOk returns a tuple with the EffectiveDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetEffectiveDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.EffectiveDate) {
		return nil, false
	}
	return o.EffectiveDate, true
}

// HasEffectiveDate returns a boolean if a field has been set.
func (o *Zone) HasEffectiveDate() bool {
	if o != nil && !IsNil(o.EffectiveDate) {
		return true
	}

	return false
}

// SetEffectiveDate gets a reference to the given time.Time and assigns it to the EffectiveDate field.
func (o *Zone) SetEffectiveDate(v time.Time) {
	o.EffectiveDate = &v
}

// GetExpirationDate returns the ExpirationDate field value if set, zero value otherwise.
func (o *Zone) GetExpirationDate() time.Time {
	if o == nil || IsNil(o.ExpirationDate) {
		var ret time.Time
		return ret
	}
	return *o.ExpirationDate
}

// GetExpirationDateOk returns a tuple with the ExpirationDate field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetExpirationDateOk() (*time.Time, bool) {
	if o == nil || IsNil(o.ExpirationDate) {
		return nil, false
	}
	return o.ExpirationDate, true
}

// HasExpirationDate returns a boolean if a field has been set.
func (o *Zone) HasExpirationDate() bool {
	if o != nil && !IsNil(o.ExpirationDate) {
		return true
	}

	return false
}

// SetExpirationDate gets a reference to the given time.Time and assigns it to the ExpirationDate field.
func (o *Zone) SetExpirationDate(v time.Time) {
	o.ExpirationDate = &v
}

// GetState returns the State field value if set, zero value otherwise.
func (o *Zone) GetState() ZoneState {
	if o == nil || IsNil(o.State) {
		var ret ZoneState
		return ret
	}
	return *o.State
}

// GetStateOk returns a tuple with the State field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetStateOk() (*ZoneState, bool) {
	if o == nil || IsNil(o.State) {
		return nil, false
	}
	return o.State, true
}

// HasState returns a boolean if a field has been set.
func (o *Zone) HasState() bool {
	if o != nil && !IsNil(o.State) {
		return true
	}

	return false
}

// SetState gets a reference to the given ZoneState and assigns it to the State field.
func (o *Zone) SetState(v ZoneState) {
	o.State = &v
}

// GetForecastOffice returns the ForecastOffice field value if set, zero value otherwise.
func (o *Zone) GetForecastOffice() string {
	if o == nil || IsNil(o.ForecastOffice) {
		var ret string
		return ret
	}
	return *o.ForecastOffice
}

// GetForecastOfficeOk returns a tuple with the ForecastOffice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetForecastOfficeOk() (*string, bool) {
	if o == nil || IsNil(o.ForecastOffice) {
		return nil, false
	}
	return o.ForecastOffice, true
}

// HasForecastOffice returns a boolean if a field has been set.
func (o *Zone) HasForecastOffice() bool {
	if o != nil && !IsNil(o.ForecastOffice) {
		return true
	}

	return false
}

// SetForecastOffice gets a reference to the given string and assigns it to the ForecastOffice field.
func (o *Zone) SetForecastOffice(v string) {
	o.ForecastOffice = &v
}

// GetGridIdentifier returns the GridIdentifier field value if set, zero value otherwise.
func (o *Zone) GetGridIdentifier() string {
	if o == nil || IsNil(o.GridIdentifier) {
		var ret string
		return ret
	}
	return *o.GridIdentifier
}

// GetGridIdentifierOk returns a tuple with the GridIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetGridIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.GridIdentifier) {
		return nil, false
	}
	return o.GridIdentifier, true
}

// HasGridIdentifier returns a boolean if a field has been set.
func (o *Zone) HasGridIdentifier() bool {
	if o != nil && !IsNil(o.GridIdentifier) {
		return true
	}

	return false
}

// SetGridIdentifier gets a reference to the given string and assigns it to the GridIdentifier field.
func (o *Zone) SetGridIdentifier(v string) {
	o.GridIdentifier = &v
}

// GetAwipsLocationIdentifier returns the AwipsLocationIdentifier field value if set, zero value otherwise.
func (o *Zone) GetAwipsLocationIdentifier() string {
	if o == nil || IsNil(o.AwipsLocationIdentifier) {
		var ret string
		return ret
	}
	return *o.AwipsLocationIdentifier
}

// GetAwipsLocationIdentifierOk returns a tuple with the AwipsLocationIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetAwipsLocationIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.AwipsLocationIdentifier) {
		return nil, false
	}
	return o.AwipsLocationIdentifier, true
}

// HasAwipsLocationIdentifier returns a boolean if a field has been set.
func (o *Zone) HasAwipsLocationIdentifier() bool {
	if o != nil && !IsNil(o.AwipsLocationIdentifier) {
		return true
	}

	return false
}

// SetAwipsLocationIdentifier gets a reference to the given string and assigns it to the AwipsLocationIdentifier field.
func (o *Zone) SetAwipsLocationIdentifier(v string) {
	o.AwipsLocationIdentifier = &v
}

// GetCwa returns the Cwa field value if set, zero value otherwise.
// Deprecated
func (o *Zone) GetCwa() []NWSForecastOfficeId {
	if o == nil || IsNil(o.Cwa) {
		var ret []NWSForecastOfficeId
		return ret
	}
	return o.Cwa
}

// GetCwaOk returns a tuple with the Cwa field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Zone) GetCwaOk() ([]NWSForecastOfficeId, bool) {
	if o == nil || IsNil(o.Cwa) {
		return nil, false
	}
	return o.Cwa, true
}

// HasCwa returns a boolean if a field has been set.
func (o *Zone) HasCwa() bool {
	if o != nil && !IsNil(o.Cwa) {
		return true
	}

	return false
}

// SetCwa gets a reference to the given []NWSForecastOfficeId and assigns it to the Cwa field.
// Deprecated
func (o *Zone) SetCwa(v []NWSForecastOfficeId) {
	o.Cwa = v
}

// GetForecastOffices returns the ForecastOffices field value if set, zero value otherwise.
// Deprecated
func (o *Zone) GetForecastOffices() []string {
	if o == nil || IsNil(o.ForecastOffices) {
		var ret []string
		return ret
	}
	return o.ForecastOffices
}

// GetForecastOfficesOk returns a tuple with the ForecastOffices field value if set, nil otherwise
// and a boolean to check if the value has been set.
// Deprecated
func (o *Zone) GetForecastOfficesOk() ([]string, bool) {
	if o == nil || IsNil(o.ForecastOffices) {
		return nil, false
	}
	return o.ForecastOffices, true
}

// HasForecastOffices returns a boolean if a field has been set.
func (o *Zone) HasForecastOffices() bool {
	if o != nil && !IsNil(o.ForecastOffices) {
		return true
	}

	return false
}

// SetForecastOffices gets a reference to the given []string and assigns it to the ForecastOffices field.
// Deprecated
func (o *Zone) SetForecastOffices(v []string) {
	o.ForecastOffices = v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *Zone) GetTimeZone() []string {
	if o == nil || IsNil(o.TimeZone) {
		var ret []string
		return ret
	}
	return o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetTimeZoneOk() ([]string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *Zone) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given []string and assigns it to the TimeZone field.
func (o *Zone) SetTimeZone(v []string) {
	o.TimeZone = v
}

// GetObservationStations returns the ObservationStations field value if set, zero value otherwise.
func (o *Zone) GetObservationStations() []string {
	if o == nil || IsNil(o.ObservationStations) {
		var ret []string
		return ret
	}
	return o.ObservationStations
}

// GetObservationStationsOk returns a tuple with the ObservationStations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Zone) GetObservationStationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ObservationStations) {
		return nil, false
	}
	return o.ObservationStations, true
}

// HasObservationStations returns a boolean if a field has been set.
func (o *Zone) HasObservationStations() bool {
	if o != nil && !IsNil(o.ObservationStations) {
		return true
	}

	return false
}

// SetObservationStations gets a reference to the given []string and assigns it to the ObservationStations field.
func (o *Zone) SetObservationStations(v []string) {
	o.ObservationStations = v
}

// GetRadarStation returns the RadarStation field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Zone) GetRadarStation() string {
	if o == nil || IsNil(o.RadarStation.Get()) {
		var ret string
		return ret
	}
	return *o.RadarStation.Get()
}

// GetRadarStationOk returns a tuple with the RadarStation field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Zone) GetRadarStationOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.RadarStation.Get(), o.RadarStation.IsSet()
}

// HasRadarStation returns a boolean if a field has been set.
func (o *Zone) HasRadarStation() bool {
	if o != nil && o.RadarStation.IsSet() {
		return true
	}

	return false
}

// SetRadarStation gets a reference to the given NullableString and assigns it to the RadarStation field.
func (o *Zone) SetRadarStation(v string) {
	o.RadarStation.Set(&v)
}
// SetRadarStationNil sets the value for RadarStation to be an explicit nil
func (o *Zone) SetRadarStationNil() {
	o.RadarStation.Set(nil)
}

// UnsetRadarStation ensures that no value is present for RadarStation, not even an explicit nil
func (o *Zone) UnsetRadarStation() {
	o.RadarStation.Unset()
}

func (o Zone) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Zone) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["@context"] = o.Context
	}
	if o.Geometry.IsSet() {
		toSerialize["geometry"] = o.Geometry.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["@id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["type"] = o.Type
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.EffectiveDate) {
		toSerialize["effectiveDate"] = o.EffectiveDate
	}
	if !IsNil(o.ExpirationDate) {
		toSerialize["expirationDate"] = o.ExpirationDate
	}
	if !IsNil(o.State) {
		toSerialize["state"] = o.State
	}
	if !IsNil(o.ForecastOffice) {
		toSerialize["forecastOffice"] = o.ForecastOffice
	}
	if !IsNil(o.GridIdentifier) {
		toSerialize["gridIdentifier"] = o.GridIdentifier
	}
	if !IsNil(o.AwipsLocationIdentifier) {
		toSerialize["awipsLocationIdentifier"] = o.AwipsLocationIdentifier
	}
	if !IsNil(o.Cwa) {
		toSerialize["cwa"] = o.Cwa
	}
	if !IsNil(o.ForecastOffices) {
		toSerialize["forecastOffices"] = o.ForecastOffices
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.ObservationStations) {
		toSerialize["observationStations"] = o.ObservationStations
	}
	if o.RadarStation.IsSet() {
		toSerialize["radarStation"] = o.RadarStation.Get()
	}
	return toSerialize, nil
}

type NullableZone struct {
	value *Zone
	isSet bool
}

func (v NullableZone) Get() *Zone {
	return v.value
}

func (v *NullableZone) Set(val *Zone) {
	v.value = val
	v.isSet = true
}

func (v NullableZone) IsSet() bool {
	return v.isSet
}

func (v *NullableZone) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZone(val *Zone) *NullableZone {
	return &NullableZone{value: val, isSet: true}
}

func (v NullableZone) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZone) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


