/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the GridpointQuantitativeValueLayer type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &GridpointQuantitativeValueLayer{}

// GridpointQuantitativeValueLayer A gridpoint layer consisting of quantitative values (numeric values with associated units of measure). 
type GridpointQuantitativeValueLayer struct {
	// A string denoting a unit of measure, expressed in the format \"{unit}\" or \"{namespace}:{unit}\". Units with the namespace \"wmo\" or \"wmoUnit\" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}. Units with the namespace \"nwsUnit\" are currently custom and do not align to any standard. Units with no namespace or the namespace \"uc\" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156). Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future. 
	Uom *string `json:"uom,omitempty" validate:"regexp=^((wmo|uc|wmoUnit|nwsUnit):)?.*$"`
	Values []GridpointQuantitativeValueLayerValuesInner `json:"values"`
}

type _GridpointQuantitativeValueLayer GridpointQuantitativeValueLayer

// NewGridpointQuantitativeValueLayer instantiates a new GridpointQuantitativeValueLayer object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewGridpointQuantitativeValueLayer(values []GridpointQuantitativeValueLayerValuesInner) *GridpointQuantitativeValueLayer {
	this := GridpointQuantitativeValueLayer{}
	this.Values = values
	return &this
}

// NewGridpointQuantitativeValueLayerWithDefaults instantiates a new GridpointQuantitativeValueLayer object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewGridpointQuantitativeValueLayerWithDefaults() *GridpointQuantitativeValueLayer {
	this := GridpointQuantitativeValueLayer{}
	return &this
}

// GetUom returns the Uom field value if set, zero value otherwise.
func (o *GridpointQuantitativeValueLayer) GetUom() string {
	if o == nil || IsNil(o.Uom) {
		var ret string
		return ret
	}
	return *o.Uom
}

// GetUomOk returns a tuple with the Uom field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *GridpointQuantitativeValueLayer) GetUomOk() (*string, bool) {
	if o == nil || IsNil(o.Uom) {
		return nil, false
	}
	return o.Uom, true
}

// HasUom returns a boolean if a field has been set.
func (o *GridpointQuantitativeValueLayer) HasUom() bool {
	if o != nil && !IsNil(o.Uom) {
		return true
	}

	return false
}

// SetUom gets a reference to the given string and assigns it to the Uom field.
func (o *GridpointQuantitativeValueLayer) SetUom(v string) {
	o.Uom = &v
}

// GetValues returns the Values field value
func (o *GridpointQuantitativeValueLayer) GetValues() []GridpointQuantitativeValueLayerValuesInner {
	if o == nil {
		var ret []GridpointQuantitativeValueLayerValuesInner
		return ret
	}

	return o.Values
}

// GetValuesOk returns a tuple with the Values field value
// and a boolean to check if the value has been set.
func (o *GridpointQuantitativeValueLayer) GetValuesOk() ([]GridpointQuantitativeValueLayerValuesInner, bool) {
	if o == nil {
		return nil, false
	}
	return o.Values, true
}

// SetValues sets field value
func (o *GridpointQuantitativeValueLayer) SetValues(v []GridpointQuantitativeValueLayerValuesInner) {
	o.Values = v
}

func (o GridpointQuantitativeValueLayer) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o GridpointQuantitativeValueLayer) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Uom) {
		toSerialize["uom"] = o.Uom
	}
	toSerialize["values"] = o.Values
	return toSerialize, nil
}

func (o *GridpointQuantitativeValueLayer) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"values",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varGridpointQuantitativeValueLayer := _GridpointQuantitativeValueLayer{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varGridpointQuantitativeValueLayer)

	if err != nil {
		return err
	}

	*o = GridpointQuantitativeValueLayer(varGridpointQuantitativeValueLayer)

	return err
}

type NullableGridpointQuantitativeValueLayer struct {
	value *GridpointQuantitativeValueLayer
	isSet bool
}

func (v NullableGridpointQuantitativeValueLayer) Get() *GridpointQuantitativeValueLayer {
	return v.value
}

func (v *NullableGridpointQuantitativeValueLayer) Set(val *GridpointQuantitativeValueLayer) {
	v.value = val
	v.isSet = true
}

func (v NullableGridpointQuantitativeValueLayer) IsSet() bool {
	return v.isSet
}

func (v *NullableGridpointQuantitativeValueLayer) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableGridpointQuantitativeValueLayer(val *GridpointQuantitativeValueLayer) *NullableGridpointQuantitativeValueLayer {
	return &NullableGridpointQuantitativeValueLayer{value: val, isSet: true}
}

func (v NullableGridpointQuantitativeValueLayer) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableGridpointQuantitativeValueLayer) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


