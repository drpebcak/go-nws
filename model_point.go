/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the Point type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Point{}

// Point struct for Point
type Point struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	// A geometry represented in Well-Known Text (WKT) format.
	Geometry NullableString `json:"geometry,omitempty"`
	Id *string `json:"@id,omitempty"`
	Type *string `json:"@type,omitempty"`
	Cwa *NWSForecastOfficeId `json:"cwa,omitempty"`
	ForecastOffice *string `json:"forecastOffice,omitempty"`
	GridId *NWSForecastOfficeId `json:"gridId,omitempty"`
	GridX *int32 `json:"gridX,omitempty"`
	GridY *int32 `json:"gridY,omitempty"`
	Forecast *string `json:"forecast,omitempty"`
	ForecastHourly *string `json:"forecastHourly,omitempty"`
	ForecastGridData *string `json:"forecastGridData,omitempty"`
	ObservationStations *string `json:"observationStations,omitempty"`
	RelativeLocation *PointRelativeLocation `json:"relativeLocation,omitempty"`
	ForecastZone *string `json:"forecastZone,omitempty"`
	County *string `json:"county,omitempty"`
	FireWeatherZone *string `json:"fireWeatherZone,omitempty"`
	TimeZone *string `json:"timeZone,omitempty"`
	RadarStation *string `json:"radarStation,omitempty"`
}

// NewPoint instantiates a new Point object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewPoint() *Point {
	this := Point{}
	return &this
}

// NewPointWithDefaults instantiates a new Point object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewPointWithDefaults() *Point {
	this := Point{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *Point) GetContext() JsonLdContext {
	if o == nil || IsNil(o.Context) {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *Point) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *Point) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Point) GetGeometry() string {
	if o == nil || IsNil(o.Geometry.Get()) {
		var ret string
		return ret
	}
	return *o.Geometry.Get()
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Point) GetGeometryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geometry.Get(), o.Geometry.IsSet()
}

// HasGeometry returns a boolean if a field has been set.
func (o *Point) HasGeometry() bool {
	if o != nil && o.Geometry.IsSet() {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given NullableString and assigns it to the Geometry field.
func (o *Point) SetGeometry(v string) {
	o.Geometry.Set(&v)
}
// SetGeometryNil sets the value for Geometry to be an explicit nil
func (o *Point) SetGeometryNil() {
	o.Geometry.Set(nil)
}

// UnsetGeometry ensures that no value is present for Geometry, not even an explicit nil
func (o *Point) UnsetGeometry() {
	o.Geometry.Unset()
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Point) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Point) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Point) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *Point) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *Point) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *Point) SetType(v string) {
	o.Type = &v
}

// GetCwa returns the Cwa field value if set, zero value otherwise.
func (o *Point) GetCwa() NWSForecastOfficeId {
	if o == nil || IsNil(o.Cwa) {
		var ret NWSForecastOfficeId
		return ret
	}
	return *o.Cwa
}

// GetCwaOk returns a tuple with the Cwa field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetCwaOk() (*NWSForecastOfficeId, bool) {
	if o == nil || IsNil(o.Cwa) {
		return nil, false
	}
	return o.Cwa, true
}

// HasCwa returns a boolean if a field has been set.
func (o *Point) HasCwa() bool {
	if o != nil && !IsNil(o.Cwa) {
		return true
	}

	return false
}

// SetCwa gets a reference to the given NWSForecastOfficeId and assigns it to the Cwa field.
func (o *Point) SetCwa(v NWSForecastOfficeId) {
	o.Cwa = &v
}

// GetForecastOffice returns the ForecastOffice field value if set, zero value otherwise.
func (o *Point) GetForecastOffice() string {
	if o == nil || IsNil(o.ForecastOffice) {
		var ret string
		return ret
	}
	return *o.ForecastOffice
}

// GetForecastOfficeOk returns a tuple with the ForecastOffice field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetForecastOfficeOk() (*string, bool) {
	if o == nil || IsNil(o.ForecastOffice) {
		return nil, false
	}
	return o.ForecastOffice, true
}

// HasForecastOffice returns a boolean if a field has been set.
func (o *Point) HasForecastOffice() bool {
	if o != nil && !IsNil(o.ForecastOffice) {
		return true
	}

	return false
}

// SetForecastOffice gets a reference to the given string and assigns it to the ForecastOffice field.
func (o *Point) SetForecastOffice(v string) {
	o.ForecastOffice = &v
}

// GetGridId returns the GridId field value if set, zero value otherwise.
func (o *Point) GetGridId() NWSForecastOfficeId {
	if o == nil || IsNil(o.GridId) {
		var ret NWSForecastOfficeId
		return ret
	}
	return *o.GridId
}

// GetGridIdOk returns a tuple with the GridId field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetGridIdOk() (*NWSForecastOfficeId, bool) {
	if o == nil || IsNil(o.GridId) {
		return nil, false
	}
	return o.GridId, true
}

// HasGridId returns a boolean if a field has been set.
func (o *Point) HasGridId() bool {
	if o != nil && !IsNil(o.GridId) {
		return true
	}

	return false
}

// SetGridId gets a reference to the given NWSForecastOfficeId and assigns it to the GridId field.
func (o *Point) SetGridId(v NWSForecastOfficeId) {
	o.GridId = &v
}

// GetGridX returns the GridX field value if set, zero value otherwise.
func (o *Point) GetGridX() int32 {
	if o == nil || IsNil(o.GridX) {
		var ret int32
		return ret
	}
	return *o.GridX
}

// GetGridXOk returns a tuple with the GridX field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetGridXOk() (*int32, bool) {
	if o == nil || IsNil(o.GridX) {
		return nil, false
	}
	return o.GridX, true
}

// HasGridX returns a boolean if a field has been set.
func (o *Point) HasGridX() bool {
	if o != nil && !IsNil(o.GridX) {
		return true
	}

	return false
}

// SetGridX gets a reference to the given int32 and assigns it to the GridX field.
func (o *Point) SetGridX(v int32) {
	o.GridX = &v
}

// GetGridY returns the GridY field value if set, zero value otherwise.
func (o *Point) GetGridY() int32 {
	if o == nil || IsNil(o.GridY) {
		var ret int32
		return ret
	}
	return *o.GridY
}

// GetGridYOk returns a tuple with the GridY field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetGridYOk() (*int32, bool) {
	if o == nil || IsNil(o.GridY) {
		return nil, false
	}
	return o.GridY, true
}

// HasGridY returns a boolean if a field has been set.
func (o *Point) HasGridY() bool {
	if o != nil && !IsNil(o.GridY) {
		return true
	}

	return false
}

// SetGridY gets a reference to the given int32 and assigns it to the GridY field.
func (o *Point) SetGridY(v int32) {
	o.GridY = &v
}

// GetForecast returns the Forecast field value if set, zero value otherwise.
func (o *Point) GetForecast() string {
	if o == nil || IsNil(o.Forecast) {
		var ret string
		return ret
	}
	return *o.Forecast
}

// GetForecastOk returns a tuple with the Forecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetForecastOk() (*string, bool) {
	if o == nil || IsNil(o.Forecast) {
		return nil, false
	}
	return o.Forecast, true
}

// HasForecast returns a boolean if a field has been set.
func (o *Point) HasForecast() bool {
	if o != nil && !IsNil(o.Forecast) {
		return true
	}

	return false
}

// SetForecast gets a reference to the given string and assigns it to the Forecast field.
func (o *Point) SetForecast(v string) {
	o.Forecast = &v
}

// GetForecastHourly returns the ForecastHourly field value if set, zero value otherwise.
func (o *Point) GetForecastHourly() string {
	if o == nil || IsNil(o.ForecastHourly) {
		var ret string
		return ret
	}
	return *o.ForecastHourly
}

// GetForecastHourlyOk returns a tuple with the ForecastHourly field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetForecastHourlyOk() (*string, bool) {
	if o == nil || IsNil(o.ForecastHourly) {
		return nil, false
	}
	return o.ForecastHourly, true
}

// HasForecastHourly returns a boolean if a field has been set.
func (o *Point) HasForecastHourly() bool {
	if o != nil && !IsNil(o.ForecastHourly) {
		return true
	}

	return false
}

// SetForecastHourly gets a reference to the given string and assigns it to the ForecastHourly field.
func (o *Point) SetForecastHourly(v string) {
	o.ForecastHourly = &v
}

// GetForecastGridData returns the ForecastGridData field value if set, zero value otherwise.
func (o *Point) GetForecastGridData() string {
	if o == nil || IsNil(o.ForecastGridData) {
		var ret string
		return ret
	}
	return *o.ForecastGridData
}

// GetForecastGridDataOk returns a tuple with the ForecastGridData field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetForecastGridDataOk() (*string, bool) {
	if o == nil || IsNil(o.ForecastGridData) {
		return nil, false
	}
	return o.ForecastGridData, true
}

// HasForecastGridData returns a boolean if a field has been set.
func (o *Point) HasForecastGridData() bool {
	if o != nil && !IsNil(o.ForecastGridData) {
		return true
	}

	return false
}

// SetForecastGridData gets a reference to the given string and assigns it to the ForecastGridData field.
func (o *Point) SetForecastGridData(v string) {
	o.ForecastGridData = &v
}

// GetObservationStations returns the ObservationStations field value if set, zero value otherwise.
func (o *Point) GetObservationStations() string {
	if o == nil || IsNil(o.ObservationStations) {
		var ret string
		return ret
	}
	return *o.ObservationStations
}

// GetObservationStationsOk returns a tuple with the ObservationStations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetObservationStationsOk() (*string, bool) {
	if o == nil || IsNil(o.ObservationStations) {
		return nil, false
	}
	return o.ObservationStations, true
}

// HasObservationStations returns a boolean if a field has been set.
func (o *Point) HasObservationStations() bool {
	if o != nil && !IsNil(o.ObservationStations) {
		return true
	}

	return false
}

// SetObservationStations gets a reference to the given string and assigns it to the ObservationStations field.
func (o *Point) SetObservationStations(v string) {
	o.ObservationStations = &v
}

// GetRelativeLocation returns the RelativeLocation field value if set, zero value otherwise.
func (o *Point) GetRelativeLocation() PointRelativeLocation {
	if o == nil || IsNil(o.RelativeLocation) {
		var ret PointRelativeLocation
		return ret
	}
	return *o.RelativeLocation
}

// GetRelativeLocationOk returns a tuple with the RelativeLocation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetRelativeLocationOk() (*PointRelativeLocation, bool) {
	if o == nil || IsNil(o.RelativeLocation) {
		return nil, false
	}
	return o.RelativeLocation, true
}

// HasRelativeLocation returns a boolean if a field has been set.
func (o *Point) HasRelativeLocation() bool {
	if o != nil && !IsNil(o.RelativeLocation) {
		return true
	}

	return false
}

// SetRelativeLocation gets a reference to the given PointRelativeLocation and assigns it to the RelativeLocation field.
func (o *Point) SetRelativeLocation(v PointRelativeLocation) {
	o.RelativeLocation = &v
}

// GetForecastZone returns the ForecastZone field value if set, zero value otherwise.
func (o *Point) GetForecastZone() string {
	if o == nil || IsNil(o.ForecastZone) {
		var ret string
		return ret
	}
	return *o.ForecastZone
}

// GetForecastZoneOk returns a tuple with the ForecastZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetForecastZoneOk() (*string, bool) {
	if o == nil || IsNil(o.ForecastZone) {
		return nil, false
	}
	return o.ForecastZone, true
}

// HasForecastZone returns a boolean if a field has been set.
func (o *Point) HasForecastZone() bool {
	if o != nil && !IsNil(o.ForecastZone) {
		return true
	}

	return false
}

// SetForecastZone gets a reference to the given string and assigns it to the ForecastZone field.
func (o *Point) SetForecastZone(v string) {
	o.ForecastZone = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *Point) GetCounty() string {
	if o == nil || IsNil(o.County) {
		var ret string
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetCountyOk() (*string, bool) {
	if o == nil || IsNil(o.County) {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *Point) HasCounty() bool {
	if o != nil && !IsNil(o.County) {
		return true
	}

	return false
}

// SetCounty gets a reference to the given string and assigns it to the County field.
func (o *Point) SetCounty(v string) {
	o.County = &v
}

// GetFireWeatherZone returns the FireWeatherZone field value if set, zero value otherwise.
func (o *Point) GetFireWeatherZone() string {
	if o == nil || IsNil(o.FireWeatherZone) {
		var ret string
		return ret
	}
	return *o.FireWeatherZone
}

// GetFireWeatherZoneOk returns a tuple with the FireWeatherZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetFireWeatherZoneOk() (*string, bool) {
	if o == nil || IsNil(o.FireWeatherZone) {
		return nil, false
	}
	return o.FireWeatherZone, true
}

// HasFireWeatherZone returns a boolean if a field has been set.
func (o *Point) HasFireWeatherZone() bool {
	if o != nil && !IsNil(o.FireWeatherZone) {
		return true
	}

	return false
}

// SetFireWeatherZone gets a reference to the given string and assigns it to the FireWeatherZone field.
func (o *Point) SetFireWeatherZone(v string) {
	o.FireWeatherZone = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *Point) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *Point) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *Point) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetRadarStation returns the RadarStation field value if set, zero value otherwise.
func (o *Point) GetRadarStation() string {
	if o == nil || IsNil(o.RadarStation) {
		var ret string
		return ret
	}
	return *o.RadarStation
}

// GetRadarStationOk returns a tuple with the RadarStation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Point) GetRadarStationOk() (*string, bool) {
	if o == nil || IsNil(o.RadarStation) {
		return nil, false
	}
	return o.RadarStation, true
}

// HasRadarStation returns a boolean if a field has been set.
func (o *Point) HasRadarStation() bool {
	if o != nil && !IsNil(o.RadarStation) {
		return true
	}

	return false
}

// SetRadarStation gets a reference to the given string and assigns it to the RadarStation field.
func (o *Point) SetRadarStation(v string) {
	o.RadarStation = &v
}

func (o Point) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Point) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["@context"] = o.Context
	}
	if o.Geometry.IsSet() {
		toSerialize["geometry"] = o.Geometry.Get()
	}
	if !IsNil(o.Id) {
		toSerialize["@id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if !IsNil(o.Cwa) {
		toSerialize["cwa"] = o.Cwa
	}
	if !IsNil(o.ForecastOffice) {
		toSerialize["forecastOffice"] = o.ForecastOffice
	}
	if !IsNil(o.GridId) {
		toSerialize["gridId"] = o.GridId
	}
	if !IsNil(o.GridX) {
		toSerialize["gridX"] = o.GridX
	}
	if !IsNil(o.GridY) {
		toSerialize["gridY"] = o.GridY
	}
	if !IsNil(o.Forecast) {
		toSerialize["forecast"] = o.Forecast
	}
	if !IsNil(o.ForecastHourly) {
		toSerialize["forecastHourly"] = o.ForecastHourly
	}
	if !IsNil(o.ForecastGridData) {
		toSerialize["forecastGridData"] = o.ForecastGridData
	}
	if !IsNil(o.ObservationStations) {
		toSerialize["observationStations"] = o.ObservationStations
	}
	if !IsNil(o.RelativeLocation) {
		toSerialize["relativeLocation"] = o.RelativeLocation
	}
	if !IsNil(o.ForecastZone) {
		toSerialize["forecastZone"] = o.ForecastZone
	}
	if !IsNil(o.County) {
		toSerialize["county"] = o.County
	}
	if !IsNil(o.FireWeatherZone) {
		toSerialize["fireWeatherZone"] = o.FireWeatherZone
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.RadarStation) {
		toSerialize["radarStation"] = o.RadarStation
	}
	return toSerialize, nil
}

type NullablePoint struct {
	value *Point
	isSet bool
}

func (v NullablePoint) Get() *Point {
	return v.value
}

func (v *NullablePoint) Set(val *Point) {
	v.value = val
	v.isSet = true
}

func (v NullablePoint) IsSet() bool {
	return v.isSet
}

func (v *NullablePoint) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullablePoint(val *Point) *NullablePoint {
	return &NullablePoint{value: val, isSet: true}
}

func (v NullablePoint) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullablePoint) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


