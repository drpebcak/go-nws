/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the ZoneForecast type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ZoneForecast{}

// ZoneForecast An object representing a zone area forecast.
type ZoneForecast struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	// A geometry represented in Well-Known Text (WKT) format.
	Geometry NullableString `json:"geometry,omitempty"`
	// An API link to the zone this forecast is for.
	Zone *string `json:"zone,omitempty"`
	// The time this zone forecast product was published.
	Updated *time.Time `json:"updated,omitempty"`
	// An array of forecast periods.
	Periods []ZoneForecastPeriodsInner `json:"periods,omitempty"`
}

// NewZoneForecast instantiates a new ZoneForecast object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewZoneForecast() *ZoneForecast {
	this := ZoneForecast{}
	return &this
}

// NewZoneForecastWithDefaults instantiates a new ZoneForecast object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewZoneForecastWithDefaults() *ZoneForecast {
	this := ZoneForecast{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ZoneForecast) GetContext() JsonLdContext {
	if o == nil || IsNil(o.Context) {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForecast) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ZoneForecast) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *ZoneForecast) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetGeometry returns the Geometry field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *ZoneForecast) GetGeometry() string {
	if o == nil || IsNil(o.Geometry.Get()) {
		var ret string
		return ret
	}
	return *o.Geometry.Get()
}

// GetGeometryOk returns a tuple with the Geometry field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ZoneForecast) GetGeometryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geometry.Get(), o.Geometry.IsSet()
}

// HasGeometry returns a boolean if a field has been set.
func (o *ZoneForecast) HasGeometry() bool {
	if o != nil && o.Geometry.IsSet() {
		return true
	}

	return false
}

// SetGeometry gets a reference to the given NullableString and assigns it to the Geometry field.
func (o *ZoneForecast) SetGeometry(v string) {
	o.Geometry.Set(&v)
}
// SetGeometryNil sets the value for Geometry to be an explicit nil
func (o *ZoneForecast) SetGeometryNil() {
	o.Geometry.Set(nil)
}

// UnsetGeometry ensures that no value is present for Geometry, not even an explicit nil
func (o *ZoneForecast) UnsetGeometry() {
	o.Geometry.Unset()
}

// GetZone returns the Zone field value if set, zero value otherwise.
func (o *ZoneForecast) GetZone() string {
	if o == nil || IsNil(o.Zone) {
		var ret string
		return ret
	}
	return *o.Zone
}

// GetZoneOk returns a tuple with the Zone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForecast) GetZoneOk() (*string, bool) {
	if o == nil || IsNil(o.Zone) {
		return nil, false
	}
	return o.Zone, true
}

// HasZone returns a boolean if a field has been set.
func (o *ZoneForecast) HasZone() bool {
	if o != nil && !IsNil(o.Zone) {
		return true
	}

	return false
}

// SetZone gets a reference to the given string and assigns it to the Zone field.
func (o *ZoneForecast) SetZone(v string) {
	o.Zone = &v
}

// GetUpdated returns the Updated field value if set, zero value otherwise.
func (o *ZoneForecast) GetUpdated() time.Time {
	if o == nil || IsNil(o.Updated) {
		var ret time.Time
		return ret
	}
	return *o.Updated
}

// GetUpdatedOk returns a tuple with the Updated field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForecast) GetUpdatedOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Updated) {
		return nil, false
	}
	return o.Updated, true
}

// HasUpdated returns a boolean if a field has been set.
func (o *ZoneForecast) HasUpdated() bool {
	if o != nil && !IsNil(o.Updated) {
		return true
	}

	return false
}

// SetUpdated gets a reference to the given time.Time and assigns it to the Updated field.
func (o *ZoneForecast) SetUpdated(v time.Time) {
	o.Updated = &v
}

// GetPeriods returns the Periods field value if set, zero value otherwise.
func (o *ZoneForecast) GetPeriods() []ZoneForecastPeriodsInner {
	if o == nil || IsNil(o.Periods) {
		var ret []ZoneForecastPeriodsInner
		return ret
	}
	return o.Periods
}

// GetPeriodsOk returns a tuple with the Periods field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ZoneForecast) GetPeriodsOk() ([]ZoneForecastPeriodsInner, bool) {
	if o == nil || IsNil(o.Periods) {
		return nil, false
	}
	return o.Periods, true
}

// HasPeriods returns a boolean if a field has been set.
func (o *ZoneForecast) HasPeriods() bool {
	if o != nil && !IsNil(o.Periods) {
		return true
	}

	return false
}

// SetPeriods gets a reference to the given []ZoneForecastPeriodsInner and assigns it to the Periods field.
func (o *ZoneForecast) SetPeriods(v []ZoneForecastPeriodsInner) {
	o.Periods = v
}

func (o ZoneForecast) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ZoneForecast) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["@context"] = o.Context
	}
	if o.Geometry.IsSet() {
		toSerialize["geometry"] = o.Geometry.Get()
	}
	if !IsNil(o.Zone) {
		toSerialize["zone"] = o.Zone
	}
	if !IsNil(o.Updated) {
		toSerialize["updated"] = o.Updated
	}
	if !IsNil(o.Periods) {
		toSerialize["periods"] = o.Periods
	}
	return toSerialize, nil
}

type NullableZoneForecast struct {
	value *ZoneForecast
	isSet bool
}

func (v NullableZoneForecast) Get() *ZoneForecast {
	return v.value
}

func (v *NullableZoneForecast) Set(val *ZoneForecast) {
	v.value = val
	v.isSet = true
}

func (v NullableZoneForecast) IsSet() bool {
	return v.isSet
}

func (v *NullableZoneForecast) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableZoneForecast(val *ZoneForecast) *NullableZoneForecast {
	return &NullableZoneForecast{value: val, isSet: true}
}

func (v NullableZoneForecast) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableZoneForecast) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


