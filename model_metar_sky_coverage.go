/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// MetarSkyCoverage the model 'MetarSkyCoverage'
type MetarSkyCoverage string

// List of MetarSkyCoverage
const (
	OVC MetarSkyCoverage = "OVC"
	BKN MetarSkyCoverage = "BKN"
	SCT MetarSkyCoverage = "SCT"
	FEW MetarSkyCoverage = "FEW"
	SKC MetarSkyCoverage = "SKC"
	CLR MetarSkyCoverage = "CLR"
	VV MetarSkyCoverage = "VV"
)

// All allowed values of MetarSkyCoverage enum
var AllowedMetarSkyCoverageEnumValues = []MetarSkyCoverage{
	"OVC",
	"BKN",
	"SCT",
	"FEW",
	"SKC",
	"CLR",
	"VV",
}

func (v *MetarSkyCoverage) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := MetarSkyCoverage(value)
	for _, existing := range AllowedMetarSkyCoverageEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid MetarSkyCoverage", value)
}

// NewMetarSkyCoverageFromValue returns a pointer to a valid MetarSkyCoverage
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewMetarSkyCoverageFromValue(v string) (*MetarSkyCoverage, error) {
	ev := MetarSkyCoverage(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for MetarSkyCoverage: valid values are %v", v, AllowedMetarSkyCoverageEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v MetarSkyCoverage) IsValid() bool {
	for _, existing := range AllowedMetarSkyCoverageEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to MetarSkyCoverage value
func (v MetarSkyCoverage) Ptr() *MetarSkyCoverage {
	return &v
}

type NullableMetarSkyCoverage struct {
	value *MetarSkyCoverage
	isSet bool
}

func (v NullableMetarSkyCoverage) Get() *MetarSkyCoverage {
	return v.value
}

func (v *NullableMetarSkyCoverage) Set(val *MetarSkyCoverage) {
	v.value = val
	v.isSet = true
}

func (v NullableMetarSkyCoverage) IsSet() bool {
	return v.isSet
}

func (v *NullableMetarSkyCoverage) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableMetarSkyCoverage(val *MetarSkyCoverage) *NullableMetarSkyCoverage {
	return &NullableMetarSkyCoverage{value: val, isSet: true}
}

func (v NullableMetarSkyCoverage) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableMetarSkyCoverage) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

