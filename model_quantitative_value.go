/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the QuantitativeValue type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &QuantitativeValue{}

// QuantitativeValue A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue 
type QuantitativeValue struct {
	// A measured value
	Value NullableFloat32 `json:"value,omitempty"`
	// The maximum value of a range of measured values
	MaxValue *float32 `json:"maxValue,omitempty"`
	// The minimum value of a range of measured values
	MinValue *float32 `json:"minValue,omitempty"`
	// A string denoting a unit of measure, expressed in the format \"{unit}\" or \"{namespace}:{unit}\". Units with the namespace \"wmo\" or \"wmoUnit\" are defined in the World Meteorological Organization Codes Registry at http://codes.wmo.int/common/unit and should be canonically resolvable to http://codes.wmo.int/common/unit/{unit}. Units with the namespace \"nwsUnit\" are currently custom and do not align to any standard. Units with no namespace or the namespace \"uc\" are compliant with the Unified Code for Units of Measure syntax defined at https://unitsofmeasure.org/. This also aligns with recent versions of the Geographic Markup Language (GML) standard, the IWXXM standard, and OGC Observations and Measurements v2.0 (ISO/DIS 19156). Namespaced units are considered deprecated. We will be aligning API to use the same standards as GML/IWXXM in the future. 
	UnitCode *string `json:"unitCode,omitempty" validate:"regexp=^((wmo|uc|wmoUnit|nwsUnit):)?.*$"`
	// For values in observation records, the quality control flag from the MADIS system. The definitions of these flags can be found at https://madis.ncep.noaa.gov/madis_sfc_qc_notes.shtml 
	QualityControl *string `json:"qualityControl,omitempty"`
}

// NewQuantitativeValue instantiates a new QuantitativeValue object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewQuantitativeValue() *QuantitativeValue {
	this := QuantitativeValue{}
	return &this
}

// NewQuantitativeValueWithDefaults instantiates a new QuantitativeValue object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewQuantitativeValueWithDefaults() *QuantitativeValue {
	this := QuantitativeValue{}
	return &this
}

// GetValue returns the Value field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *QuantitativeValue) GetValue() float32 {
	if o == nil || IsNil(o.Value.Get()) {
		var ret float32
		return ret
	}
	return *o.Value.Get()
}

// GetValueOk returns a tuple with the Value field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *QuantitativeValue) GetValueOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return o.Value.Get(), o.Value.IsSet()
}

// HasValue returns a boolean if a field has been set.
func (o *QuantitativeValue) HasValue() bool {
	if o != nil && o.Value.IsSet() {
		return true
	}

	return false
}

// SetValue gets a reference to the given NullableFloat32 and assigns it to the Value field.
func (o *QuantitativeValue) SetValue(v float32) {
	o.Value.Set(&v)
}
// SetValueNil sets the value for Value to be an explicit nil
func (o *QuantitativeValue) SetValueNil() {
	o.Value.Set(nil)
}

// UnsetValue ensures that no value is present for Value, not even an explicit nil
func (o *QuantitativeValue) UnsetValue() {
	o.Value.Unset()
}

// GetMaxValue returns the MaxValue field value if set, zero value otherwise.
func (o *QuantitativeValue) GetMaxValue() float32 {
	if o == nil || IsNil(o.MaxValue) {
		var ret float32
		return ret
	}
	return *o.MaxValue
}

// GetMaxValueOk returns a tuple with the MaxValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuantitativeValue) GetMaxValueOk() (*float32, bool) {
	if o == nil || IsNil(o.MaxValue) {
		return nil, false
	}
	return o.MaxValue, true
}

// HasMaxValue returns a boolean if a field has been set.
func (o *QuantitativeValue) HasMaxValue() bool {
	if o != nil && !IsNil(o.MaxValue) {
		return true
	}

	return false
}

// SetMaxValue gets a reference to the given float32 and assigns it to the MaxValue field.
func (o *QuantitativeValue) SetMaxValue(v float32) {
	o.MaxValue = &v
}

// GetMinValue returns the MinValue field value if set, zero value otherwise.
func (o *QuantitativeValue) GetMinValue() float32 {
	if o == nil || IsNil(o.MinValue) {
		var ret float32
		return ret
	}
	return *o.MinValue
}

// GetMinValueOk returns a tuple with the MinValue field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuantitativeValue) GetMinValueOk() (*float32, bool) {
	if o == nil || IsNil(o.MinValue) {
		return nil, false
	}
	return o.MinValue, true
}

// HasMinValue returns a boolean if a field has been set.
func (o *QuantitativeValue) HasMinValue() bool {
	if o != nil && !IsNil(o.MinValue) {
		return true
	}

	return false
}

// SetMinValue gets a reference to the given float32 and assigns it to the MinValue field.
func (o *QuantitativeValue) SetMinValue(v float32) {
	o.MinValue = &v
}

// GetUnitCode returns the UnitCode field value if set, zero value otherwise.
func (o *QuantitativeValue) GetUnitCode() string {
	if o == nil || IsNil(o.UnitCode) {
		var ret string
		return ret
	}
	return *o.UnitCode
}

// GetUnitCodeOk returns a tuple with the UnitCode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuantitativeValue) GetUnitCodeOk() (*string, bool) {
	if o == nil || IsNil(o.UnitCode) {
		return nil, false
	}
	return o.UnitCode, true
}

// HasUnitCode returns a boolean if a field has been set.
func (o *QuantitativeValue) HasUnitCode() bool {
	if o != nil && !IsNil(o.UnitCode) {
		return true
	}

	return false
}

// SetUnitCode gets a reference to the given string and assigns it to the UnitCode field.
func (o *QuantitativeValue) SetUnitCode(v string) {
	o.UnitCode = &v
}

// GetQualityControl returns the QualityControl field value if set, zero value otherwise.
func (o *QuantitativeValue) GetQualityControl() string {
	if o == nil || IsNil(o.QualityControl) {
		var ret string
		return ret
	}
	return *o.QualityControl
}

// GetQualityControlOk returns a tuple with the QualityControl field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *QuantitativeValue) GetQualityControlOk() (*string, bool) {
	if o == nil || IsNil(o.QualityControl) {
		return nil, false
	}
	return o.QualityControl, true
}

// HasQualityControl returns a boolean if a field has been set.
func (o *QuantitativeValue) HasQualityControl() bool {
	if o != nil && !IsNil(o.QualityControl) {
		return true
	}

	return false
}

// SetQualityControl gets a reference to the given string and assigns it to the QualityControl field.
func (o *QuantitativeValue) SetQualityControl(v string) {
	o.QualityControl = &v
}

func (o QuantitativeValue) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o QuantitativeValue) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if o.Value.IsSet() {
		toSerialize["value"] = o.Value.Get()
	}
	if !IsNil(o.MaxValue) {
		toSerialize["maxValue"] = o.MaxValue
	}
	if !IsNil(o.MinValue) {
		toSerialize["minValue"] = o.MinValue
	}
	if !IsNil(o.UnitCode) {
		toSerialize["unitCode"] = o.UnitCode
	}
	if !IsNil(o.QualityControl) {
		toSerialize["qualityControl"] = o.QualityControl
	}
	return toSerialize, nil
}

type NullableQuantitativeValue struct {
	value *QuantitativeValue
	isSet bool
}

func (v NullableQuantitativeValue) Get() *QuantitativeValue {
	return v.value
}

func (v *NullableQuantitativeValue) Set(val *QuantitativeValue) {
	v.value = val
	v.isSet = true
}

func (v NullableQuantitativeValue) IsSet() bool {
	return v.isSet
}

func (v *NullableQuantitativeValue) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableQuantitativeValue(val *QuantitativeValue) *NullableQuantitativeValue {
	return &NullableQuantitativeValue{value: val, isSet: true}
}

func (v NullableQuantitativeValue) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableQuantitativeValue) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


