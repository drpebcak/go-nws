/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"time"
)

// checks if the Alert type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &Alert{}

// Alert An object representing a public alert message. Unless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information. http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://alerts.weather.gov/#technical-notes-v12 
type Alert struct {
	// The identifier of the alert message.
	Id *string `json:"id,omitempty"`
	// A textual description of the area affected by the alert.
	AreaDesc *string `json:"areaDesc,omitempty"`
	Geocode *AlertGeocode `json:"geocode,omitempty"`
	// An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification. 
	AffectedZones []string `json:"affectedZones,omitempty"`
	// A list of prior alerts that this alert updates or replaces.
	References []AlertReferencesInner `json:"references,omitempty"`
	// The time of the origination of the alert message.
	Sent *time.Time `json:"sent,omitempty"`
	// The effective time of the information of the alert message.
	Effective *time.Time `json:"effective,omitempty"`
	// The expected time of the beginning of the subject event of the alert message.
	Onset NullableTime `json:"onset,omitempty"`
	// The expiry time of the information of the alert message.
	Expires *time.Time `json:"expires,omitempty"`
	// The expected end time of the subject event of the alert message.
	Ends NullableTime `json:"ends,omitempty"`
	Status *AlertStatus `json:"status,omitempty"`
	MessageType *AlertMessageType `json:"messageType,omitempty"`
	// The code denoting the category of the subject event of the alert message.
	Category *string `json:"category,omitempty"`
	Severity *AlertSeverity `json:"severity,omitempty"`
	Certainty *AlertCertainty `json:"certainty,omitempty"`
	Urgency *AlertUrgency `json:"urgency,omitempty"`
	// The text denoting the type of the subject event of the alert message.
	Event *string `json:"event,omitempty"`
	// Email address of the NWS webmaster.
	Sender *string `json:"sender,omitempty"`
	// The text naming the originator of the alert message.
	SenderName *string `json:"senderName,omitempty"`
	// The text headline of the alert message.
	Headline NullableString `json:"headline,omitempty"`
	// The text describing the subject event of the alert message.
	Description *string `json:"description,omitempty"`
	// The text describing the recommended action to be taken by recipients of the alert message. 
	Instruction NullableString `json:"instruction,omitempty"`
	// The code denoting the type of action recommended for the target audience. This corresponds to responseType in the CAP specification. 
	Response *string `json:"response,omitempty"`
	// System-specific additional parameters associated with the alert message. The keys in this object correspond to parameter definitions in the NWS CAP specification. 
	Parameters *map[string][]interface{} `json:"parameters,omitempty"`
}

// NewAlert instantiates a new Alert object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewAlert() *Alert {
	this := Alert{}
	return &this
}

// NewAlertWithDefaults instantiates a new Alert object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewAlertWithDefaults() *Alert {
	this := Alert{}
	return &this
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *Alert) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *Alert) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *Alert) SetId(v string) {
	o.Id = &v
}

// GetAreaDesc returns the AreaDesc field value if set, zero value otherwise.
func (o *Alert) GetAreaDesc() string {
	if o == nil || IsNil(o.AreaDesc) {
		var ret string
		return ret
	}
	return *o.AreaDesc
}

// GetAreaDescOk returns a tuple with the AreaDesc field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAreaDescOk() (*string, bool) {
	if o == nil || IsNil(o.AreaDesc) {
		return nil, false
	}
	return o.AreaDesc, true
}

// HasAreaDesc returns a boolean if a field has been set.
func (o *Alert) HasAreaDesc() bool {
	if o != nil && !IsNil(o.AreaDesc) {
		return true
	}

	return false
}

// SetAreaDesc gets a reference to the given string and assigns it to the AreaDesc field.
func (o *Alert) SetAreaDesc(v string) {
	o.AreaDesc = &v
}

// GetGeocode returns the Geocode field value if set, zero value otherwise.
func (o *Alert) GetGeocode() AlertGeocode {
	if o == nil || IsNil(o.Geocode) {
		var ret AlertGeocode
		return ret
	}
	return *o.Geocode
}

// GetGeocodeOk returns a tuple with the Geocode field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetGeocodeOk() (*AlertGeocode, bool) {
	if o == nil || IsNil(o.Geocode) {
		return nil, false
	}
	return o.Geocode, true
}

// HasGeocode returns a boolean if a field has been set.
func (o *Alert) HasGeocode() bool {
	if o != nil && !IsNil(o.Geocode) {
		return true
	}

	return false
}

// SetGeocode gets a reference to the given AlertGeocode and assigns it to the Geocode field.
func (o *Alert) SetGeocode(v AlertGeocode) {
	o.Geocode = &v
}

// GetAffectedZones returns the AffectedZones field value if set, zero value otherwise.
func (o *Alert) GetAffectedZones() []string {
	if o == nil || IsNil(o.AffectedZones) {
		var ret []string
		return ret
	}
	return o.AffectedZones
}

// GetAffectedZonesOk returns a tuple with the AffectedZones field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetAffectedZonesOk() ([]string, bool) {
	if o == nil || IsNil(o.AffectedZones) {
		return nil, false
	}
	return o.AffectedZones, true
}

// HasAffectedZones returns a boolean if a field has been set.
func (o *Alert) HasAffectedZones() bool {
	if o != nil && !IsNil(o.AffectedZones) {
		return true
	}

	return false
}

// SetAffectedZones gets a reference to the given []string and assigns it to the AffectedZones field.
func (o *Alert) SetAffectedZones(v []string) {
	o.AffectedZones = v
}

// GetReferences returns the References field value if set, zero value otherwise.
func (o *Alert) GetReferences() []AlertReferencesInner {
	if o == nil || IsNil(o.References) {
		var ret []AlertReferencesInner
		return ret
	}
	return o.References
}

// GetReferencesOk returns a tuple with the References field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetReferencesOk() ([]AlertReferencesInner, bool) {
	if o == nil || IsNil(o.References) {
		return nil, false
	}
	return o.References, true
}

// HasReferences returns a boolean if a field has been set.
func (o *Alert) HasReferences() bool {
	if o != nil && !IsNil(o.References) {
		return true
	}

	return false
}

// SetReferences gets a reference to the given []AlertReferencesInner and assigns it to the References field.
func (o *Alert) SetReferences(v []AlertReferencesInner) {
	o.References = v
}

// GetSent returns the Sent field value if set, zero value otherwise.
func (o *Alert) GetSent() time.Time {
	if o == nil || IsNil(o.Sent) {
		var ret time.Time
		return ret
	}
	return *o.Sent
}

// GetSentOk returns a tuple with the Sent field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetSentOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Sent) {
		return nil, false
	}
	return o.Sent, true
}

// HasSent returns a boolean if a field has been set.
func (o *Alert) HasSent() bool {
	if o != nil && !IsNil(o.Sent) {
		return true
	}

	return false
}

// SetSent gets a reference to the given time.Time and assigns it to the Sent field.
func (o *Alert) SetSent(v time.Time) {
	o.Sent = &v
}

// GetEffective returns the Effective field value if set, zero value otherwise.
func (o *Alert) GetEffective() time.Time {
	if o == nil || IsNil(o.Effective) {
		var ret time.Time
		return ret
	}
	return *o.Effective
}

// GetEffectiveOk returns a tuple with the Effective field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetEffectiveOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Effective) {
		return nil, false
	}
	return o.Effective, true
}

// HasEffective returns a boolean if a field has been set.
func (o *Alert) HasEffective() bool {
	if o != nil && !IsNil(o.Effective) {
		return true
	}

	return false
}

// SetEffective gets a reference to the given time.Time and assigns it to the Effective field.
func (o *Alert) SetEffective(v time.Time) {
	o.Effective = &v
}

// GetOnset returns the Onset field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetOnset() time.Time {
	if o == nil || IsNil(o.Onset.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Onset.Get()
}

// GetOnsetOk returns a tuple with the Onset field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetOnsetOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Onset.Get(), o.Onset.IsSet()
}

// HasOnset returns a boolean if a field has been set.
func (o *Alert) HasOnset() bool {
	if o != nil && o.Onset.IsSet() {
		return true
	}

	return false
}

// SetOnset gets a reference to the given NullableTime and assigns it to the Onset field.
func (o *Alert) SetOnset(v time.Time) {
	o.Onset.Set(&v)
}
// SetOnsetNil sets the value for Onset to be an explicit nil
func (o *Alert) SetOnsetNil() {
	o.Onset.Set(nil)
}

// UnsetOnset ensures that no value is present for Onset, not even an explicit nil
func (o *Alert) UnsetOnset() {
	o.Onset.Unset()
}

// GetExpires returns the Expires field value if set, zero value otherwise.
func (o *Alert) GetExpires() time.Time {
	if o == nil || IsNil(o.Expires) {
		var ret time.Time
		return ret
	}
	return *o.Expires
}

// GetExpiresOk returns a tuple with the Expires field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetExpiresOk() (*time.Time, bool) {
	if o == nil || IsNil(o.Expires) {
		return nil, false
	}
	return o.Expires, true
}

// HasExpires returns a boolean if a field has been set.
func (o *Alert) HasExpires() bool {
	if o != nil && !IsNil(o.Expires) {
		return true
	}

	return false
}

// SetExpires gets a reference to the given time.Time and assigns it to the Expires field.
func (o *Alert) SetExpires(v time.Time) {
	o.Expires = &v
}

// GetEnds returns the Ends field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetEnds() time.Time {
	if o == nil || IsNil(o.Ends.Get()) {
		var ret time.Time
		return ret
	}
	return *o.Ends.Get()
}

// GetEndsOk returns a tuple with the Ends field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetEndsOk() (*time.Time, bool) {
	if o == nil {
		return nil, false
	}
	return o.Ends.Get(), o.Ends.IsSet()
}

// HasEnds returns a boolean if a field has been set.
func (o *Alert) HasEnds() bool {
	if o != nil && o.Ends.IsSet() {
		return true
	}

	return false
}

// SetEnds gets a reference to the given NullableTime and assigns it to the Ends field.
func (o *Alert) SetEnds(v time.Time) {
	o.Ends.Set(&v)
}
// SetEndsNil sets the value for Ends to be an explicit nil
func (o *Alert) SetEndsNil() {
	o.Ends.Set(nil)
}

// UnsetEnds ensures that no value is present for Ends, not even an explicit nil
func (o *Alert) UnsetEnds() {
	o.Ends.Unset()
}

// GetStatus returns the Status field value if set, zero value otherwise.
func (o *Alert) GetStatus() AlertStatus {
	if o == nil || IsNil(o.Status) {
		var ret AlertStatus
		return ret
	}
	return *o.Status
}

// GetStatusOk returns a tuple with the Status field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetStatusOk() (*AlertStatus, bool) {
	if o == nil || IsNil(o.Status) {
		return nil, false
	}
	return o.Status, true
}

// HasStatus returns a boolean if a field has been set.
func (o *Alert) HasStatus() bool {
	if o != nil && !IsNil(o.Status) {
		return true
	}

	return false
}

// SetStatus gets a reference to the given AlertStatus and assigns it to the Status field.
func (o *Alert) SetStatus(v AlertStatus) {
	o.Status = &v
}

// GetMessageType returns the MessageType field value if set, zero value otherwise.
func (o *Alert) GetMessageType() AlertMessageType {
	if o == nil || IsNil(o.MessageType) {
		var ret AlertMessageType
		return ret
	}
	return *o.MessageType
}

// GetMessageTypeOk returns a tuple with the MessageType field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetMessageTypeOk() (*AlertMessageType, bool) {
	if o == nil || IsNil(o.MessageType) {
		return nil, false
	}
	return o.MessageType, true
}

// HasMessageType returns a boolean if a field has been set.
func (o *Alert) HasMessageType() bool {
	if o != nil && !IsNil(o.MessageType) {
		return true
	}

	return false
}

// SetMessageType gets a reference to the given AlertMessageType and assigns it to the MessageType field.
func (o *Alert) SetMessageType(v AlertMessageType) {
	o.MessageType = &v
}

// GetCategory returns the Category field value if set, zero value otherwise.
func (o *Alert) GetCategory() string {
	if o == nil || IsNil(o.Category) {
		var ret string
		return ret
	}
	return *o.Category
}

// GetCategoryOk returns a tuple with the Category field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetCategoryOk() (*string, bool) {
	if o == nil || IsNil(o.Category) {
		return nil, false
	}
	return o.Category, true
}

// HasCategory returns a boolean if a field has been set.
func (o *Alert) HasCategory() bool {
	if o != nil && !IsNil(o.Category) {
		return true
	}

	return false
}

// SetCategory gets a reference to the given string and assigns it to the Category field.
func (o *Alert) SetCategory(v string) {
	o.Category = &v
}

// GetSeverity returns the Severity field value if set, zero value otherwise.
func (o *Alert) GetSeverity() AlertSeverity {
	if o == nil || IsNil(o.Severity) {
		var ret AlertSeverity
		return ret
	}
	return *o.Severity
}

// GetSeverityOk returns a tuple with the Severity field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetSeverityOk() (*AlertSeverity, bool) {
	if o == nil || IsNil(o.Severity) {
		return nil, false
	}
	return o.Severity, true
}

// HasSeverity returns a boolean if a field has been set.
func (o *Alert) HasSeverity() bool {
	if o != nil && !IsNil(o.Severity) {
		return true
	}

	return false
}

// SetSeverity gets a reference to the given AlertSeverity and assigns it to the Severity field.
func (o *Alert) SetSeverity(v AlertSeverity) {
	o.Severity = &v
}

// GetCertainty returns the Certainty field value if set, zero value otherwise.
func (o *Alert) GetCertainty() AlertCertainty {
	if o == nil || IsNil(o.Certainty) {
		var ret AlertCertainty
		return ret
	}
	return *o.Certainty
}

// GetCertaintyOk returns a tuple with the Certainty field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetCertaintyOk() (*AlertCertainty, bool) {
	if o == nil || IsNil(o.Certainty) {
		return nil, false
	}
	return o.Certainty, true
}

// HasCertainty returns a boolean if a field has been set.
func (o *Alert) HasCertainty() bool {
	if o != nil && !IsNil(o.Certainty) {
		return true
	}

	return false
}

// SetCertainty gets a reference to the given AlertCertainty and assigns it to the Certainty field.
func (o *Alert) SetCertainty(v AlertCertainty) {
	o.Certainty = &v
}

// GetUrgency returns the Urgency field value if set, zero value otherwise.
func (o *Alert) GetUrgency() AlertUrgency {
	if o == nil || IsNil(o.Urgency) {
		var ret AlertUrgency
		return ret
	}
	return *o.Urgency
}

// GetUrgencyOk returns a tuple with the Urgency field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetUrgencyOk() (*AlertUrgency, bool) {
	if o == nil || IsNil(o.Urgency) {
		return nil, false
	}
	return o.Urgency, true
}

// HasUrgency returns a boolean if a field has been set.
func (o *Alert) HasUrgency() bool {
	if o != nil && !IsNil(o.Urgency) {
		return true
	}

	return false
}

// SetUrgency gets a reference to the given AlertUrgency and assigns it to the Urgency field.
func (o *Alert) SetUrgency(v AlertUrgency) {
	o.Urgency = &v
}

// GetEvent returns the Event field value if set, zero value otherwise.
func (o *Alert) GetEvent() string {
	if o == nil || IsNil(o.Event) {
		var ret string
		return ret
	}
	return *o.Event
}

// GetEventOk returns a tuple with the Event field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetEventOk() (*string, bool) {
	if o == nil || IsNil(o.Event) {
		return nil, false
	}
	return o.Event, true
}

// HasEvent returns a boolean if a field has been set.
func (o *Alert) HasEvent() bool {
	if o != nil && !IsNil(o.Event) {
		return true
	}

	return false
}

// SetEvent gets a reference to the given string and assigns it to the Event field.
func (o *Alert) SetEvent(v string) {
	o.Event = &v
}

// GetSender returns the Sender field value if set, zero value otherwise.
func (o *Alert) GetSender() string {
	if o == nil || IsNil(o.Sender) {
		var ret string
		return ret
	}
	return *o.Sender
}

// GetSenderOk returns a tuple with the Sender field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetSenderOk() (*string, bool) {
	if o == nil || IsNil(o.Sender) {
		return nil, false
	}
	return o.Sender, true
}

// HasSender returns a boolean if a field has been set.
func (o *Alert) HasSender() bool {
	if o != nil && !IsNil(o.Sender) {
		return true
	}

	return false
}

// SetSender gets a reference to the given string and assigns it to the Sender field.
func (o *Alert) SetSender(v string) {
	o.Sender = &v
}

// GetSenderName returns the SenderName field value if set, zero value otherwise.
func (o *Alert) GetSenderName() string {
	if o == nil || IsNil(o.SenderName) {
		var ret string
		return ret
	}
	return *o.SenderName
}

// GetSenderNameOk returns a tuple with the SenderName field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetSenderNameOk() (*string, bool) {
	if o == nil || IsNil(o.SenderName) {
		return nil, false
	}
	return o.SenderName, true
}

// HasSenderName returns a boolean if a field has been set.
func (o *Alert) HasSenderName() bool {
	if o != nil && !IsNil(o.SenderName) {
		return true
	}

	return false
}

// SetSenderName gets a reference to the given string and assigns it to the SenderName field.
func (o *Alert) SetSenderName(v string) {
	o.SenderName = &v
}

// GetHeadline returns the Headline field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetHeadline() string {
	if o == nil || IsNil(o.Headline.Get()) {
		var ret string
		return ret
	}
	return *o.Headline.Get()
}

// GetHeadlineOk returns a tuple with the Headline field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetHeadlineOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Headline.Get(), o.Headline.IsSet()
}

// HasHeadline returns a boolean if a field has been set.
func (o *Alert) HasHeadline() bool {
	if o != nil && o.Headline.IsSet() {
		return true
	}

	return false
}

// SetHeadline gets a reference to the given NullableString and assigns it to the Headline field.
func (o *Alert) SetHeadline(v string) {
	o.Headline.Set(&v)
}
// SetHeadlineNil sets the value for Headline to be an explicit nil
func (o *Alert) SetHeadlineNil() {
	o.Headline.Set(nil)
}

// UnsetHeadline ensures that no value is present for Headline, not even an explicit nil
func (o *Alert) UnsetHeadline() {
	o.Headline.Unset()
}

// GetDescription returns the Description field value if set, zero value otherwise.
func (o *Alert) GetDescription() string {
	if o == nil || IsNil(o.Description) {
		var ret string
		return ret
	}
	return *o.Description
}

// GetDescriptionOk returns a tuple with the Description field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetDescriptionOk() (*string, bool) {
	if o == nil || IsNil(o.Description) {
		return nil, false
	}
	return o.Description, true
}

// HasDescription returns a boolean if a field has been set.
func (o *Alert) HasDescription() bool {
	if o != nil && !IsNil(o.Description) {
		return true
	}

	return false
}

// SetDescription gets a reference to the given string and assigns it to the Description field.
func (o *Alert) SetDescription(v string) {
	o.Description = &v
}

// GetInstruction returns the Instruction field value if set, zero value otherwise (both if not set or set to explicit null).
func (o *Alert) GetInstruction() string {
	if o == nil || IsNil(o.Instruction.Get()) {
		var ret string
		return ret
	}
	return *o.Instruction.Get()
}

// GetInstructionOk returns a tuple with the Instruction field value if set, nil otherwise
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *Alert) GetInstructionOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Instruction.Get(), o.Instruction.IsSet()
}

// HasInstruction returns a boolean if a field has been set.
func (o *Alert) HasInstruction() bool {
	if o != nil && o.Instruction.IsSet() {
		return true
	}

	return false
}

// SetInstruction gets a reference to the given NullableString and assigns it to the Instruction field.
func (o *Alert) SetInstruction(v string) {
	o.Instruction.Set(&v)
}
// SetInstructionNil sets the value for Instruction to be an explicit nil
func (o *Alert) SetInstructionNil() {
	o.Instruction.Set(nil)
}

// UnsetInstruction ensures that no value is present for Instruction, not even an explicit nil
func (o *Alert) UnsetInstruction() {
	o.Instruction.Unset()
}

// GetResponse returns the Response field value if set, zero value otherwise.
func (o *Alert) GetResponse() string {
	if o == nil || IsNil(o.Response) {
		var ret string
		return ret
	}
	return *o.Response
}

// GetResponseOk returns a tuple with the Response field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetResponseOk() (*string, bool) {
	if o == nil || IsNil(o.Response) {
		return nil, false
	}
	return o.Response, true
}

// HasResponse returns a boolean if a field has been set.
func (o *Alert) HasResponse() bool {
	if o != nil && !IsNil(o.Response) {
		return true
	}

	return false
}

// SetResponse gets a reference to the given string and assigns it to the Response field.
func (o *Alert) SetResponse(v string) {
	o.Response = &v
}

// GetParameters returns the Parameters field value if set, zero value otherwise.
func (o *Alert) GetParameters() map[string][]interface{} {
	if o == nil || IsNil(o.Parameters) {
		var ret map[string][]interface{}
		return ret
	}
	return *o.Parameters
}

// GetParametersOk returns a tuple with the Parameters field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *Alert) GetParametersOk() (*map[string][]interface{}, bool) {
	if o == nil || IsNil(o.Parameters) {
		return nil, false
	}
	return o.Parameters, true
}

// HasParameters returns a boolean if a field has been set.
func (o *Alert) HasParameters() bool {
	if o != nil && !IsNil(o.Parameters) {
		return true
	}

	return false
}

// SetParameters gets a reference to the given map[string][]interface{} and assigns it to the Parameters field.
func (o *Alert) SetParameters(v map[string][]interface{}) {
	o.Parameters = &v
}

func (o Alert) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o Alert) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Id) {
		toSerialize["id"] = o.Id
	}
	if !IsNil(o.AreaDesc) {
		toSerialize["areaDesc"] = o.AreaDesc
	}
	if !IsNil(o.Geocode) {
		toSerialize["geocode"] = o.Geocode
	}
	if !IsNil(o.AffectedZones) {
		toSerialize["affectedZones"] = o.AffectedZones
	}
	if !IsNil(o.References) {
		toSerialize["references"] = o.References
	}
	if !IsNil(o.Sent) {
		toSerialize["sent"] = o.Sent
	}
	if !IsNil(o.Effective) {
		toSerialize["effective"] = o.Effective
	}
	if o.Onset.IsSet() {
		toSerialize["onset"] = o.Onset.Get()
	}
	if !IsNil(o.Expires) {
		toSerialize["expires"] = o.Expires
	}
	if o.Ends.IsSet() {
		toSerialize["ends"] = o.Ends.Get()
	}
	if !IsNil(o.Status) {
		toSerialize["status"] = o.Status
	}
	if !IsNil(o.MessageType) {
		toSerialize["messageType"] = o.MessageType
	}
	if !IsNil(o.Category) {
		toSerialize["category"] = o.Category
	}
	if !IsNil(o.Severity) {
		toSerialize["severity"] = o.Severity
	}
	if !IsNil(o.Certainty) {
		toSerialize["certainty"] = o.Certainty
	}
	if !IsNil(o.Urgency) {
		toSerialize["urgency"] = o.Urgency
	}
	if !IsNil(o.Event) {
		toSerialize["event"] = o.Event
	}
	if !IsNil(o.Sender) {
		toSerialize["sender"] = o.Sender
	}
	if !IsNil(o.SenderName) {
		toSerialize["senderName"] = o.SenderName
	}
	if o.Headline.IsSet() {
		toSerialize["headline"] = o.Headline.Get()
	}
	if !IsNil(o.Description) {
		toSerialize["description"] = o.Description
	}
	if o.Instruction.IsSet() {
		toSerialize["instruction"] = o.Instruction.Get()
	}
	if !IsNil(o.Response) {
		toSerialize["response"] = o.Response
	}
	if !IsNil(o.Parameters) {
		toSerialize["parameters"] = o.Parameters
	}
	return toSerialize, nil
}

type NullableAlert struct {
	value *Alert
	isSet bool
}

func (v NullableAlert) Get() *Alert {
	return v.value
}

func (v *NullableAlert) Set(val *Alert) {
	v.value = val
	v.isSet = true
}

func (v NullableAlert) IsSet() bool {
	return v.isSet
}

func (v *NullableAlert) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlert(val *Alert) *NullableAlert {
	return &NullableAlert{value: val, isSet: true}
}

func (v NullableAlert) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlert) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


