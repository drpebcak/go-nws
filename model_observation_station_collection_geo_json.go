/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObservationStationCollectionGeoJson type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationStationCollectionGeoJson{}

// ObservationStationCollectionGeoJson struct for ObservationStationCollectionGeoJson
type ObservationStationCollectionGeoJson struct {
	Context *JsonLdContext `json:"@context,omitempty"`
	Type string `json:"type"`
	Features []ObservationStationCollectionGeoJsonAllOfFeatures `json:"features"`
	ObservationStations []string `json:"observationStations,omitempty"`
	Pagination *PaginationInfo `json:"pagination,omitempty"`
}

type _ObservationStationCollectionGeoJson ObservationStationCollectionGeoJson

// NewObservationStationCollectionGeoJson instantiates a new ObservationStationCollectionGeoJson object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationStationCollectionGeoJson(type_ string, features []ObservationStationCollectionGeoJsonAllOfFeatures) *ObservationStationCollectionGeoJson {
	this := ObservationStationCollectionGeoJson{}
	this.Type = type_
	this.Features = features
	return &this
}

// NewObservationStationCollectionGeoJsonWithDefaults instantiates a new ObservationStationCollectionGeoJson object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationStationCollectionGeoJsonWithDefaults() *ObservationStationCollectionGeoJson {
	this := ObservationStationCollectionGeoJson{}
	return &this
}

// GetContext returns the Context field value if set, zero value otherwise.
func (o *ObservationStationCollectionGeoJson) GetContext() JsonLdContext {
	if o == nil || IsNil(o.Context) {
		var ret JsonLdContext
		return ret
	}
	return *o.Context
}

// GetContextOk returns a tuple with the Context field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationCollectionGeoJson) GetContextOk() (*JsonLdContext, bool) {
	if o == nil || IsNil(o.Context) {
		return nil, false
	}
	return o.Context, true
}

// HasContext returns a boolean if a field has been set.
func (o *ObservationStationCollectionGeoJson) HasContext() bool {
	if o != nil && !IsNil(o.Context) {
		return true
	}

	return false
}

// SetContext gets a reference to the given JsonLdContext and assigns it to the Context field.
func (o *ObservationStationCollectionGeoJson) SetContext(v JsonLdContext) {
	o.Context = &v
}

// GetType returns the Type field value
func (o *ObservationStationCollectionGeoJson) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ObservationStationCollectionGeoJson) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ObservationStationCollectionGeoJson) SetType(v string) {
	o.Type = v
}

// GetFeatures returns the Features field value
func (o *ObservationStationCollectionGeoJson) GetFeatures() []ObservationStationCollectionGeoJsonAllOfFeatures {
	if o == nil {
		var ret []ObservationStationCollectionGeoJsonAllOfFeatures
		return ret
	}

	return o.Features
}

// GetFeaturesOk returns a tuple with the Features field value
// and a boolean to check if the value has been set.
func (o *ObservationStationCollectionGeoJson) GetFeaturesOk() ([]ObservationStationCollectionGeoJsonAllOfFeatures, bool) {
	if o == nil {
		return nil, false
	}
	return o.Features, true
}

// SetFeatures sets field value
func (o *ObservationStationCollectionGeoJson) SetFeatures(v []ObservationStationCollectionGeoJsonAllOfFeatures) {
	o.Features = v
}

// GetObservationStations returns the ObservationStations field value if set, zero value otherwise.
func (o *ObservationStationCollectionGeoJson) GetObservationStations() []string {
	if o == nil || IsNil(o.ObservationStations) {
		var ret []string
		return ret
	}
	return o.ObservationStations
}

// GetObservationStationsOk returns a tuple with the ObservationStations field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationCollectionGeoJson) GetObservationStationsOk() ([]string, bool) {
	if o == nil || IsNil(o.ObservationStations) {
		return nil, false
	}
	return o.ObservationStations, true
}

// HasObservationStations returns a boolean if a field has been set.
func (o *ObservationStationCollectionGeoJson) HasObservationStations() bool {
	if o != nil && !IsNil(o.ObservationStations) {
		return true
	}

	return false
}

// SetObservationStations gets a reference to the given []string and assigns it to the ObservationStations field.
func (o *ObservationStationCollectionGeoJson) SetObservationStations(v []string) {
	o.ObservationStations = v
}

// GetPagination returns the Pagination field value if set, zero value otherwise.
func (o *ObservationStationCollectionGeoJson) GetPagination() PaginationInfo {
	if o == nil || IsNil(o.Pagination) {
		var ret PaginationInfo
		return ret
	}
	return *o.Pagination
}

// GetPaginationOk returns a tuple with the Pagination field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationCollectionGeoJson) GetPaginationOk() (*PaginationInfo, bool) {
	if o == nil || IsNil(o.Pagination) {
		return nil, false
	}
	return o.Pagination, true
}

// HasPagination returns a boolean if a field has been set.
func (o *ObservationStationCollectionGeoJson) HasPagination() bool {
	if o != nil && !IsNil(o.Pagination) {
		return true
	}

	return false
}

// SetPagination gets a reference to the given PaginationInfo and assigns it to the Pagination field.
func (o *ObservationStationCollectionGeoJson) SetPagination(v PaginationInfo) {
	o.Pagination = &v
}

func (o ObservationStationCollectionGeoJson) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationStationCollectionGeoJson) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Context) {
		toSerialize["@context"] = o.Context
	}
	toSerialize["type"] = o.Type
	toSerialize["features"] = o.Features
	if !IsNil(o.ObservationStations) {
		toSerialize["observationStations"] = o.ObservationStations
	}
	if !IsNil(o.Pagination) {
		toSerialize["pagination"] = o.Pagination
	}
	return toSerialize, nil
}

func (o *ObservationStationCollectionGeoJson) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"features",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservationStationCollectionGeoJson := _ObservationStationCollectionGeoJson{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObservationStationCollectionGeoJson)

	if err != nil {
		return err
	}

	*o = ObservationStationCollectionGeoJson(varObservationStationCollectionGeoJson)

	return err
}

type NullableObservationStationCollectionGeoJson struct {
	value *ObservationStationCollectionGeoJson
	isSet bool
}

func (v NullableObservationStationCollectionGeoJson) Get() *ObservationStationCollectionGeoJson {
	return v.value
}

func (v *NullableObservationStationCollectionGeoJson) Set(val *ObservationStationCollectionGeoJson) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationStationCollectionGeoJson) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationStationCollectionGeoJson) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationStationCollectionGeoJson(val *ObservationStationCollectionGeoJson) *NullableObservationStationCollectionGeoJson {
	return &NullableObservationStationCollectionGeoJson{value: val, isSet: true}
}

func (v NullableObservationStationCollectionGeoJson) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationStationCollectionGeoJson) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


