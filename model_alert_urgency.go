/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AlertUrgency the model 'AlertUrgency'
type AlertUrgency string

// List of AlertUrgency
const (
	IMMEDIATE AlertUrgency = "Immediate"
	EXPECTED AlertUrgency = "Expected"
	FUTURE AlertUrgency = "Future"
	PAST AlertUrgency = "Past"
	UNKNOWN AlertUrgency = "Unknown"
)

// All allowed values of AlertUrgency enum
var AllowedAlertUrgencyEnumValues = []AlertUrgency{
	"Immediate",
	"Expected",
	"Future",
	"Past",
	"Unknown",
}

func (v *AlertUrgency) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertUrgency(value)
	for _, existing := range AllowedAlertUrgencyEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertUrgency", value)
}

// NewAlertUrgencyFromValue returns a pointer to a valid AlertUrgency
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertUrgencyFromValue(v string) (*AlertUrgency, error) {
	ev := AlertUrgency(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertUrgency: valid values are %v", v, AllowedAlertUrgencyEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertUrgency) IsValid() bool {
	for _, existing := range AllowedAlertUrgencyEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertUrgency value
func (v AlertUrgency) Ptr() *AlertUrgency {
	return &v
}

type NullableAlertUrgency struct {
	value *AlertUrgency
	isSet bool
}

func (v NullableAlertUrgency) Get() *AlertUrgency {
	return v.value
}

func (v *NullableAlertUrgency) Set(val *AlertUrgency) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertUrgency) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertUrgency) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertUrgency(val *AlertUrgency) *NullableAlertUrgency {
	return &NullableAlertUrgency{value: val, isSet: true}
}

func (v NullableAlertUrgency) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertUrgency) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

