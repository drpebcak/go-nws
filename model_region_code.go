/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"gopkg.in/validator.v2"
	"fmt"
)

// RegionCode - struct for RegionCode
type RegionCode struct {
	LandRegionCode *LandRegionCode
	MarineRegionCode *MarineRegionCode
}

// LandRegionCodeAsRegionCode is a convenience function that returns LandRegionCode wrapped in RegionCode
func LandRegionCodeAsRegionCode(v *LandRegionCode) RegionCode {
	return RegionCode{
		LandRegionCode: v,
	}
}

// MarineRegionCodeAsRegionCode is a convenience function that returns MarineRegionCode wrapped in RegionCode
func MarineRegionCodeAsRegionCode(v *MarineRegionCode) RegionCode {
	return RegionCode{
		MarineRegionCode: v,
	}
}


// Unmarshal JSON data into one of the pointers in the struct
func (dst *RegionCode) UnmarshalJSON(data []byte) error {
	var err error
	match := 0
	// try to unmarshal data into LandRegionCode
	err = newStrictDecoder(data).Decode(&dst.LandRegionCode)
	if err == nil {
		jsonLandRegionCode, _ := json.Marshal(dst.LandRegionCode)
		if string(jsonLandRegionCode) == "{}" { // empty struct
			dst.LandRegionCode = nil
		} else {
			if err = validator.Validate(dst.LandRegionCode); err != nil {
				dst.LandRegionCode = nil
			} else {
				match++
			}
		}
	} else {
		dst.LandRegionCode = nil
	}

	// try to unmarshal data into MarineRegionCode
	err = newStrictDecoder(data).Decode(&dst.MarineRegionCode)
	if err == nil {
		jsonMarineRegionCode, _ := json.Marshal(dst.MarineRegionCode)
		if string(jsonMarineRegionCode) == "{}" { // empty struct
			dst.MarineRegionCode = nil
		} else {
			if err = validator.Validate(dst.MarineRegionCode); err != nil {
				dst.MarineRegionCode = nil
			} else {
				match++
			}
		}
	} else {
		dst.MarineRegionCode = nil
	}

	if match > 1 { // more than 1 match
		// reset to nil
		dst.LandRegionCode = nil
		dst.MarineRegionCode = nil

		return fmt.Errorf("data matches more than one schema in oneOf(RegionCode)")
	} else if match == 1 {
		return nil // exactly one match
	} else { // no match
		return fmt.Errorf("data failed to match schemas in oneOf(RegionCode)")
	}
}

// Marshal data from the first non-nil pointers in the struct to JSON
func (src RegionCode) MarshalJSON() ([]byte, error) {
	if src.LandRegionCode != nil {
		return json.Marshal(&src.LandRegionCode)
	}

	if src.MarineRegionCode != nil {
		return json.Marshal(&src.MarineRegionCode)
	}

	return nil, nil // no data in oneOf schemas
}

// Get the actual instance
func (obj *RegionCode) GetActualInstance() (interface{}) {
	if obj == nil {
		return nil
	}
	if obj.LandRegionCode != nil {
		return obj.LandRegionCode
	}

	if obj.MarineRegionCode != nil {
		return obj.MarineRegionCode
	}

	// all schemas are nil
	return nil
}

type NullableRegionCode struct {
	value *RegionCode
	isSet bool
}

func (v NullableRegionCode) Get() *RegionCode {
	return v.value
}

func (v *NullableRegionCode) Set(val *RegionCode) {
	v.value = val
	v.isSet = true
}

func (v NullableRegionCode) IsSet() bool {
	return v.isSet
}

func (v *NullableRegionCode) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableRegionCode(val *RegionCode) *NullableRegionCode {
	return &NullableRegionCode{value: val, isSet: true}
}

func (v NullableRegionCode) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableRegionCode) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


