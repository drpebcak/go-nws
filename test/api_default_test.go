/*
weather.gov API

Testing DefaultAPIService

*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech);

package openapi

import (
	"context"
	openapiclient "github.com/drpebcak/go-nws"
	"github.com/stretchr/testify/assert"
	"github.com/stretchr/testify/require"
	"testing"
)

func Test_openapi_DefaultAPIService(t *testing.T) {

	configuration := openapiclient.NewConfiguration()
	apiClient := openapiclient.NewAPIClient(configuration)

	t.Run("Test DefaultAPIService AlertsActive", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AlertsActive(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsActiveArea", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var area AreaCode

		resp, httpRes, err := apiClient.DefaultAPI.AlertsActiveArea(context.Background(), area).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsActiveCount", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AlertsActiveCount(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsActiveRegion", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var region MarineRegionCode

		resp, httpRes, err := apiClient.DefaultAPI.AlertsActiveRegion(context.Background(), region).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsActiveZone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.DefaultAPI.AlertsActiveZone(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AlertsQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsSingle", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultAPI.AlertsSingle(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService AlertsTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.AlertsTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Cwa", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cwsuId NWSCenterWeatherServiceUnitId
		var date string
		var sequence int32

		resp, httpRes, err := apiClient.DefaultAPI.Cwa(context.Background(), cwsuId, date, sequence).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Cwas", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cwsuId NWSCenterWeatherServiceUnitId

		resp, httpRes, err := apiClient.DefaultAPI.Cwas(context.Background(), cwsuId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Cwsu", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var cwsuId NWSCenterWeatherServiceUnitId

		resp, httpRes, err := apiClient.DefaultAPI.Cwsu(context.Background(), cwsuId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Glossary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.Glossary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Gridpoint", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wfo NWSForecastOfficeId
		var x int32
		var y int32

		resp, httpRes, err := apiClient.DefaultAPI.Gridpoint(context.Background(), wfo, x, y).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GridpointForecast", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wfo NWSForecastOfficeId
		var x int32
		var y int32

		resp, httpRes, err := apiClient.DefaultAPI.GridpointForecast(context.Background(), wfo, x, y).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GridpointForecastHourly", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wfo NWSForecastOfficeId
		var x int32
		var y int32

		resp, httpRes, err := apiClient.DefaultAPI.GridpointForecastHourly(context.Background(), wfo, x, y).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService GridpointStations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var wfo NWSForecastOfficeId
		var x int32
		var y int32

		resp, httpRes, err := apiClient.DefaultAPI.GridpointStations(context.Background(), wfo, x, y).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Icons", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var set string
		var timeOfDay string
		var first string

		resp, httpRes, err := apiClient.DefaultAPI.Icons(context.Background(), set, timeOfDay, first).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IconsDualCondition", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var set string
		var timeOfDay string
		var first string
		var second string

		resp, httpRes, err := apiClient.DefaultAPI.IconsDualCondition(context.Background(), set, timeOfDay, first, second).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService IconsSummary", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.IconsSummary(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService LocationProducts", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var locationId string

		resp, httpRes, err := apiClient.DefaultAPI.LocationProducts(context.Background(), locationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObsStation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string

		resp, httpRes, err := apiClient.DefaultAPI.ObsStation(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ObsStations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ObsStations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Office", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var officeId NWSOfficeId

		resp, httpRes, err := apiClient.DefaultAPI.Office(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService OfficeHeadline", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var officeId NWSOfficeId
		var headlineId string

		resp, httpRes, err := apiClient.DefaultAPI.OfficeHeadline(context.Background(), officeId, headlineId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService OfficeHeadlines", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var officeId NWSOfficeId

		resp, httpRes, err := apiClient.DefaultAPI.OfficeHeadlines(context.Background(), officeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Point", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var point string

		resp, httpRes, err := apiClient.DefaultAPI.Point(context.Background(), point).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService PointStations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var point string

		resp, httpRes, err := apiClient.DefaultAPI.PointStations(context.Background(), point).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Product", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var productId string

		resp, httpRes, err := apiClient.DefaultAPI.Product(context.Background(), productId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ProductLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ProductLocations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ProductTypes", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ProductTypes(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ProductsQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ProductsQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ProductsType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var typeId string

		resp, httpRes, err := apiClient.DefaultAPI.ProductsType(context.Background(), typeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ProductsTypeLocation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var typeId string
		var locationId string

		resp, httpRes, err := apiClient.DefaultAPI.ProductsTypeLocation(context.Background(), typeId, locationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ProductsTypeLocations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var typeId string

		resp, httpRes, err := apiClient.DefaultAPI.ProductsTypeLocations(context.Background(), typeId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RadarProfiler", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string

		resp, httpRes, err := apiClient.DefaultAPI.RadarProfiler(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RadarQueue", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var host string

		resp, httpRes, err := apiClient.DefaultAPI.RadarQueue(context.Background(), host).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RadarServer", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var id string

		resp, httpRes, err := apiClient.DefaultAPI.RadarServer(context.Background(), id).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RadarServers", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.RadarServers(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RadarStation", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string

		resp, httpRes, err := apiClient.DefaultAPI.RadarStation(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RadarStationAlarms", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string

		resp, httpRes, err := apiClient.DefaultAPI.RadarStationAlarms(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService RadarStations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.RadarStations(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SatelliteThumbnails", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var area string

		resp, httpRes, err := apiClient.DefaultAPI.SatelliteThumbnails(context.Background(), area).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Sigmet", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var atsu string
		var date string
		var time string

		resp, httpRes, err := apiClient.DefaultAPI.Sigmet(context.Background(), atsu, date, time).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SigmetQuery", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.SigmetQuery(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SigmetsByATSU", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var atsu string

		resp, httpRes, err := apiClient.DefaultAPI.SigmetsByATSU(context.Background(), atsu).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService SigmetsByATSUByDate", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var atsu string
		var date string

		resp, httpRes, err := apiClient.DefaultAPI.SigmetsByATSUByDate(context.Background(), atsu, date).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService StationObservationLatest", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string

		resp, httpRes, err := apiClient.DefaultAPI.StationObservationLatest(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService StationObservationList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string

		resp, httpRes, err := apiClient.DefaultAPI.StationObservationList(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService StationObservationTime", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string
		var time time.Time

		resp, httpRes, err := apiClient.DefaultAPI.StationObservationTime(context.Background(), stationId, time).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Taf", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string
		var date string
		var time string

		resp, httpRes, err := apiClient.DefaultAPI.Taf(context.Background(), stationId, date, time).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Tafs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var stationId string

		resp, httpRes, err := apiClient.DefaultAPI.Tafs(context.Background(), stationId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService Zone", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var type_ NWSZoneType
		var zoneId string

		resp, httpRes, err := apiClient.DefaultAPI.Zone(context.Background(), type_, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ZoneForecast", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var type_ string
		var zoneId string

		resp, httpRes, err := apiClient.DefaultAPI.ZoneForecast(context.Background(), type_, zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ZoneList", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		resp, httpRes, err := apiClient.DefaultAPI.ZoneList(context.Background()).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ZoneListType", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var type_ NWSZoneType

		resp, httpRes, err := apiClient.DefaultAPI.ZoneListType(context.Background(), type_).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ZoneObs", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.DefaultAPI.ZoneObs(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

	t.Run("Test DefaultAPIService ZoneStations", func(t *testing.T) {

		t.Skip("skip test") // remove to run test

		var zoneId string

		resp, httpRes, err := apiClient.DefaultAPI.ZoneStations(context.Background(), zoneId).Execute()

		require.Nil(t, err)
		require.NotNil(t, resp)
		assert.Equal(t, 200, httpRes.StatusCode)

	})

}
