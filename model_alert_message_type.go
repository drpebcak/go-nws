/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AlertMessageType the model 'AlertMessageType'
type AlertMessageType string

// List of AlertMessageType
const (
	ALERT AlertMessageType = "Alert"
	UPDATE AlertMessageType = "Update"
	CANCEL AlertMessageType = "Cancel"
	ACK AlertMessageType = "Ack"
	ERROR AlertMessageType = "Error"
)

// All allowed values of AlertMessageType enum
var AllowedAlertMessageTypeEnumValues = []AlertMessageType{
	"Alert",
	"Update",
	"Cancel",
	"Ack",
	"Error",
}

func (v *AlertMessageType) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertMessageType(value)
	for _, existing := range AllowedAlertMessageTypeEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertMessageType", value)
}

// NewAlertMessageTypeFromValue returns a pointer to a valid AlertMessageType
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertMessageTypeFromValue(v string) (*AlertMessageType, error) {
	ev := AlertMessageType(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertMessageType: valid values are %v", v, AllowedAlertMessageTypeEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertMessageType) IsValid() bool {
	for _, existing := range AllowedAlertMessageTypeEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertMessageType value
func (v AlertMessageType) Ptr() *AlertMessageType {
	return &v
}

type NullableAlertMessageType struct {
	value *AlertMessageType
	isSet bool
}

func (v NullableAlertMessageType) Get() *AlertMessageType {
	return v.value
}

func (v *NullableAlertMessageType) Set(val *AlertMessageType) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertMessageType) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertMessageType) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertMessageType(val *AlertMessageType) *NullableAlertMessageType {
	return &NullableAlertMessageType{value: val, isSet: true}
}

func (v NullableAlertMessageType) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertMessageType) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

