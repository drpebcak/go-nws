/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// checks if the ProblemDetail type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ProblemDetail{}

// ProblemDetail Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs).
type ProblemDetail struct {
	// A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL. 
	Type string `json:"type"`
	// A short, human-readable summary of the problem type.
	Title string `json:"title"`
	// The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem. 
	Status float32 `json:"status"`
	// A human-readable explanation specific to this occurrence of the problem.
	Detail string `json:"detail"`
	// A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL. 
	Instance string `json:"instance"`
	// A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue. 
	CorrelationId string `json:"correlationId"`
	AdditionalProperties map[string]interface{}
}

type _ProblemDetail ProblemDetail

// NewProblemDetail instantiates a new ProblemDetail object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewProblemDetail(type_ string, title string, status float32, detail string, instance string, correlationId string) *ProblemDetail {
	this := ProblemDetail{}
	this.Type = type_
	this.Title = title
	this.Status = status
	this.Detail = detail
	this.Instance = instance
	this.CorrelationId = correlationId
	return &this
}

// NewProblemDetailWithDefaults instantiates a new ProblemDetail object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewProblemDetailWithDefaults() *ProblemDetail {
	this := ProblemDetail{}
	var type_ string = "about:blank"
	this.Type = type_
	return &this
}

// GetType returns the Type field value
func (o *ProblemDetail) GetType() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Type
}

// GetTypeOk returns a tuple with the Type field value
// and a boolean to check if the value has been set.
func (o *ProblemDetail) GetTypeOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Type, true
}

// SetType sets field value
func (o *ProblemDetail) SetType(v string) {
	o.Type = v
}

// GetTitle returns the Title field value
func (o *ProblemDetail) GetTitle() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Title
}

// GetTitleOk returns a tuple with the Title field value
// and a boolean to check if the value has been set.
func (o *ProblemDetail) GetTitleOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Title, true
}

// SetTitle sets field value
func (o *ProblemDetail) SetTitle(v string) {
	o.Title = v
}

// GetStatus returns the Status field value
func (o *ProblemDetail) GetStatus() float32 {
	if o == nil {
		var ret float32
		return ret
	}

	return o.Status
}

// GetStatusOk returns a tuple with the Status field value
// and a boolean to check if the value has been set.
func (o *ProblemDetail) GetStatusOk() (*float32, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Status, true
}

// SetStatus sets field value
func (o *ProblemDetail) SetStatus(v float32) {
	o.Status = v
}

// GetDetail returns the Detail field value
func (o *ProblemDetail) GetDetail() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Detail
}

// GetDetailOk returns a tuple with the Detail field value
// and a boolean to check if the value has been set.
func (o *ProblemDetail) GetDetailOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Detail, true
}

// SetDetail sets field value
func (o *ProblemDetail) SetDetail(v string) {
	o.Detail = v
}

// GetInstance returns the Instance field value
func (o *ProblemDetail) GetInstance() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.Instance
}

// GetInstanceOk returns a tuple with the Instance field value
// and a boolean to check if the value has been set.
func (o *ProblemDetail) GetInstanceOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Instance, true
}

// SetInstance sets field value
func (o *ProblemDetail) SetInstance(v string) {
	o.Instance = v
}

// GetCorrelationId returns the CorrelationId field value
func (o *ProblemDetail) GetCorrelationId() string {
	if o == nil {
		var ret string
		return ret
	}

	return o.CorrelationId
}

// GetCorrelationIdOk returns a tuple with the CorrelationId field value
// and a boolean to check if the value has been set.
func (o *ProblemDetail) GetCorrelationIdOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return &o.CorrelationId, true
}

// SetCorrelationId sets field value
func (o *ProblemDetail) SetCorrelationId(v string) {
	o.CorrelationId = v
}

func (o ProblemDetail) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ProblemDetail) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["type"] = o.Type
	toSerialize["title"] = o.Title
	toSerialize["status"] = o.Status
	toSerialize["detail"] = o.Detail
	toSerialize["instance"] = o.Instance
	toSerialize["correlationId"] = o.CorrelationId

	for key, value := range o.AdditionalProperties {
		toSerialize[key] = value
	}

	return toSerialize, nil
}

func (o *ProblemDetail) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"type",
		"title",
		"status",
		"detail",
		"instance",
		"correlationId",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varProblemDetail := _ProblemDetail{}

	err = json.Unmarshal(data, &varProblemDetail)

	if err != nil {
		return err
	}

	*o = ProblemDetail(varProblemDetail)

	additionalProperties := make(map[string]interface{})

	if err = json.Unmarshal(data, &additionalProperties); err == nil {
		delete(additionalProperties, "type")
		delete(additionalProperties, "title")
		delete(additionalProperties, "status")
		delete(additionalProperties, "detail")
		delete(additionalProperties, "instance")
		delete(additionalProperties, "correlationId")
		o.AdditionalProperties = additionalProperties
	}

	return err
}

type NullableProblemDetail struct {
	value *ProblemDetail
	isSet bool
}

func (v NullableProblemDetail) Get() *ProblemDetail {
	return v.value
}

func (v *NullableProblemDetail) Set(val *ProblemDetail) {
	v.value = val
	v.isSet = true
}

func (v NullableProblemDetail) IsSet() bool {
	return v.isSet
}

func (v *NullableProblemDetail) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableProblemDetail(val *ProblemDetail) *NullableProblemDetail {
	return &NullableProblemDetail{value: val, isSet: true}
}

func (v NullableProblemDetail) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableProblemDetail) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


