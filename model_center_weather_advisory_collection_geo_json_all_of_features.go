/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
)

// checks if the CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures{}

// CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures struct for CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures
type CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures struct {
	Properties *CenterWeatherAdvisory `json:"properties,omitempty"`
}

// NewCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures instantiates a new CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures() *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures {
	this := CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures{}
	return &this
}

// NewCenterWeatherAdvisoryCollectionGeoJsonAllOfFeaturesWithDefaults instantiates a new CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewCenterWeatherAdvisoryCollectionGeoJsonAllOfFeaturesWithDefaults() *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures {
	this := CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures{}
	return &this
}

// GetProperties returns the Properties field value if set, zero value otherwise.
func (o *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) GetProperties() CenterWeatherAdvisory {
	if o == nil || IsNil(o.Properties) {
		var ret CenterWeatherAdvisory
		return ret
	}
	return *o.Properties
}

// GetPropertiesOk returns a tuple with the Properties field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) GetPropertiesOk() (*CenterWeatherAdvisory, bool) {
	if o == nil || IsNil(o.Properties) {
		return nil, false
	}
	return o.Properties, true
}

// HasProperties returns a boolean if a field has been set.
func (o *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) HasProperties() bool {
	if o != nil && !IsNil(o.Properties) {
		return true
	}

	return false
}

// SetProperties gets a reference to the given CenterWeatherAdvisory and assigns it to the Properties field.
func (o *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) SetProperties(v CenterWeatherAdvisory) {
	o.Properties = &v
}

func (o CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	if !IsNil(o.Properties) {
		toSerialize["properties"] = o.Properties
	}
	return toSerialize, nil
}

type NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures struct {
	value *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures
	isSet bool
}

func (v NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) Get() *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures {
	return v.value
}

func (v *NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) Set(val *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) {
	v.value = val
	v.isSet = true
}

func (v NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) IsSet() bool {
	return v.isSet
}

func (v *NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures(val *CenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) *NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures {
	return &NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures{value: val, isSet: true}
}

func (v NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableCenterWeatherAdvisoryCollectionGeoJsonAllOfFeatures) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


