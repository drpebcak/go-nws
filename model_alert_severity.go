/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// AlertSeverity the model 'AlertSeverity'
type AlertSeverity string

// List of AlertSeverity
const (
	EXTREME AlertSeverity = "Extreme"
	SEVERE AlertSeverity = "Severe"
	MODERATE AlertSeverity = "Moderate"
	MINOR AlertSeverity = "Minor"
	UNKNOWN AlertSeverity = "Unknown"
)

// All allowed values of AlertSeverity enum
var AllowedAlertSeverityEnumValues = []AlertSeverity{
	"Extreme",
	"Severe",
	"Moderate",
	"Minor",
	"Unknown",
}

func (v *AlertSeverity) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := AlertSeverity(value)
	for _, existing := range AllowedAlertSeverityEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid AlertSeverity", value)
}

// NewAlertSeverityFromValue returns a pointer to a valid AlertSeverity
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewAlertSeverityFromValue(v string) (*AlertSeverity, error) {
	ev := AlertSeverity(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for AlertSeverity: valid values are %v", v, AllowedAlertSeverityEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v AlertSeverity) IsValid() bool {
	for _, existing := range AllowedAlertSeverityEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to AlertSeverity value
func (v AlertSeverity) Ptr() *AlertSeverity {
	return &v
}

type NullableAlertSeverity struct {
	value *AlertSeverity
	isSet bool
}

func (v NullableAlertSeverity) Get() *AlertSeverity {
	return v.value
}

func (v *NullableAlertSeverity) Set(val *AlertSeverity) {
	v.value = val
	v.isSet = true
}

func (v NullableAlertSeverity) IsSet() bool {
	return v.isSet
}

func (v *NullableAlertSeverity) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableAlertSeverity(val *AlertSeverity) *NullableAlertSeverity {
	return &NullableAlertSeverity{value: val, isSet: true}
}

func (v NullableAlertSeverity) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableAlertSeverity) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

