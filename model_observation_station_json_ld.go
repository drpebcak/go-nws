/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"bytes"
	"fmt"
)

// checks if the ObservationStationJsonLd type satisfies the MappedNullable interface at compile time
var _ MappedNullable = &ObservationStationJsonLd{}

// ObservationStationJsonLd struct for ObservationStationJsonLd
type ObservationStationJsonLd struct {
	Context JsonLdContext `json:"@context"`
	// A geometry represented in Well-Known Text (WKT) format.
	Geometry NullableString `json:"geometry"`
	Id *string `json:"@id,omitempty"`
	Type *string `json:"@type,omitempty"`
	Elevation *QuantitativeValue `json:"elevation,omitempty"`
	StationIdentifier *string `json:"stationIdentifier,omitempty"`
	Name *string `json:"name,omitempty"`
	TimeZone *string `json:"timeZone,omitempty"`
	// A link to the NWS public forecast zone containing this station.
	Forecast *string `json:"forecast,omitempty"`
	// A link to the NWS county zone containing this station.
	County *string `json:"county,omitempty"`
	// A link to the NWS fire weather forecast zone containing this station.
	FireWeatherZone *string `json:"fireWeatherZone,omitempty"`
}

type _ObservationStationJsonLd ObservationStationJsonLd

// NewObservationStationJsonLd instantiates a new ObservationStationJsonLd object
// This constructor will assign default values to properties that have it defined,
// and makes sure properties required by API are set, but the set of arguments
// will change when the set of required properties is changed
func NewObservationStationJsonLd(context JsonLdContext, geometry NullableString) *ObservationStationJsonLd {
	this := ObservationStationJsonLd{}
	this.Context = context
	this.Geometry = geometry
	return &this
}

// NewObservationStationJsonLdWithDefaults instantiates a new ObservationStationJsonLd object
// This constructor will only assign default values to properties that have it defined,
// but it doesn't guarantee that properties required by API are set
func NewObservationStationJsonLdWithDefaults() *ObservationStationJsonLd {
	this := ObservationStationJsonLd{}
	return &this
}

// GetContext returns the Context field value
func (o *ObservationStationJsonLd) GetContext() JsonLdContext {
	if o == nil {
		var ret JsonLdContext
		return ret
	}

	return o.Context
}

// GetContextOk returns a tuple with the Context field value
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetContextOk() (*JsonLdContext, bool) {
	if o == nil {
		return nil, false
	}
	return &o.Context, true
}

// SetContext sets field value
func (o *ObservationStationJsonLd) SetContext(v JsonLdContext) {
	o.Context = v
}

// GetGeometry returns the Geometry field value
// If the value is explicit nil, the zero value for string will be returned
func (o *ObservationStationJsonLd) GetGeometry() string {
	if o == nil || o.Geometry.Get() == nil {
		var ret string
		return ret
	}

	return *o.Geometry.Get()
}

// GetGeometryOk returns a tuple with the Geometry field value
// and a boolean to check if the value has been set.
// NOTE: If the value is an explicit nil, `nil, true` will be returned
func (o *ObservationStationJsonLd) GetGeometryOk() (*string, bool) {
	if o == nil {
		return nil, false
	}
	return o.Geometry.Get(), o.Geometry.IsSet()
}

// SetGeometry sets field value
func (o *ObservationStationJsonLd) SetGeometry(v string) {
	o.Geometry.Set(&v)
}

// GetId returns the Id field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetId() string {
	if o == nil || IsNil(o.Id) {
		var ret string
		return ret
	}
	return *o.Id
}

// GetIdOk returns a tuple with the Id field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetIdOk() (*string, bool) {
	if o == nil || IsNil(o.Id) {
		return nil, false
	}
	return o.Id, true
}

// HasId returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasId() bool {
	if o != nil && !IsNil(o.Id) {
		return true
	}

	return false
}

// SetId gets a reference to the given string and assigns it to the Id field.
func (o *ObservationStationJsonLd) SetId(v string) {
	o.Id = &v
}

// GetType returns the Type field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetType() string {
	if o == nil || IsNil(o.Type) {
		var ret string
		return ret
	}
	return *o.Type
}

// GetTypeOk returns a tuple with the Type field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetTypeOk() (*string, bool) {
	if o == nil || IsNil(o.Type) {
		return nil, false
	}
	return o.Type, true
}

// HasType returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasType() bool {
	if o != nil && !IsNil(o.Type) {
		return true
	}

	return false
}

// SetType gets a reference to the given string and assigns it to the Type field.
func (o *ObservationStationJsonLd) SetType(v string) {
	o.Type = &v
}

// GetElevation returns the Elevation field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetElevation() QuantitativeValue {
	if o == nil || IsNil(o.Elevation) {
		var ret QuantitativeValue
		return ret
	}
	return *o.Elevation
}

// GetElevationOk returns a tuple with the Elevation field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetElevationOk() (*QuantitativeValue, bool) {
	if o == nil || IsNil(o.Elevation) {
		return nil, false
	}
	return o.Elevation, true
}

// HasElevation returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasElevation() bool {
	if o != nil && !IsNil(o.Elevation) {
		return true
	}

	return false
}

// SetElevation gets a reference to the given QuantitativeValue and assigns it to the Elevation field.
func (o *ObservationStationJsonLd) SetElevation(v QuantitativeValue) {
	o.Elevation = &v
}

// GetStationIdentifier returns the StationIdentifier field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetStationIdentifier() string {
	if o == nil || IsNil(o.StationIdentifier) {
		var ret string
		return ret
	}
	return *o.StationIdentifier
}

// GetStationIdentifierOk returns a tuple with the StationIdentifier field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetStationIdentifierOk() (*string, bool) {
	if o == nil || IsNil(o.StationIdentifier) {
		return nil, false
	}
	return o.StationIdentifier, true
}

// HasStationIdentifier returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasStationIdentifier() bool {
	if o != nil && !IsNil(o.StationIdentifier) {
		return true
	}

	return false
}

// SetStationIdentifier gets a reference to the given string and assigns it to the StationIdentifier field.
func (o *ObservationStationJsonLd) SetStationIdentifier(v string) {
	o.StationIdentifier = &v
}

// GetName returns the Name field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetName() string {
	if o == nil || IsNil(o.Name) {
		var ret string
		return ret
	}
	return *o.Name
}

// GetNameOk returns a tuple with the Name field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetNameOk() (*string, bool) {
	if o == nil || IsNil(o.Name) {
		return nil, false
	}
	return o.Name, true
}

// HasName returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasName() bool {
	if o != nil && !IsNil(o.Name) {
		return true
	}

	return false
}

// SetName gets a reference to the given string and assigns it to the Name field.
func (o *ObservationStationJsonLd) SetName(v string) {
	o.Name = &v
}

// GetTimeZone returns the TimeZone field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetTimeZone() string {
	if o == nil || IsNil(o.TimeZone) {
		var ret string
		return ret
	}
	return *o.TimeZone
}

// GetTimeZoneOk returns a tuple with the TimeZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetTimeZoneOk() (*string, bool) {
	if o == nil || IsNil(o.TimeZone) {
		return nil, false
	}
	return o.TimeZone, true
}

// HasTimeZone returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasTimeZone() bool {
	if o != nil && !IsNil(o.TimeZone) {
		return true
	}

	return false
}

// SetTimeZone gets a reference to the given string and assigns it to the TimeZone field.
func (o *ObservationStationJsonLd) SetTimeZone(v string) {
	o.TimeZone = &v
}

// GetForecast returns the Forecast field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetForecast() string {
	if o == nil || IsNil(o.Forecast) {
		var ret string
		return ret
	}
	return *o.Forecast
}

// GetForecastOk returns a tuple with the Forecast field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetForecastOk() (*string, bool) {
	if o == nil || IsNil(o.Forecast) {
		return nil, false
	}
	return o.Forecast, true
}

// HasForecast returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasForecast() bool {
	if o != nil && !IsNil(o.Forecast) {
		return true
	}

	return false
}

// SetForecast gets a reference to the given string and assigns it to the Forecast field.
func (o *ObservationStationJsonLd) SetForecast(v string) {
	o.Forecast = &v
}

// GetCounty returns the County field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetCounty() string {
	if o == nil || IsNil(o.County) {
		var ret string
		return ret
	}
	return *o.County
}

// GetCountyOk returns a tuple with the County field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetCountyOk() (*string, bool) {
	if o == nil || IsNil(o.County) {
		return nil, false
	}
	return o.County, true
}

// HasCounty returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasCounty() bool {
	if o != nil && !IsNil(o.County) {
		return true
	}

	return false
}

// SetCounty gets a reference to the given string and assigns it to the County field.
func (o *ObservationStationJsonLd) SetCounty(v string) {
	o.County = &v
}

// GetFireWeatherZone returns the FireWeatherZone field value if set, zero value otherwise.
func (o *ObservationStationJsonLd) GetFireWeatherZone() string {
	if o == nil || IsNil(o.FireWeatherZone) {
		var ret string
		return ret
	}
	return *o.FireWeatherZone
}

// GetFireWeatherZoneOk returns a tuple with the FireWeatherZone field value if set, nil otherwise
// and a boolean to check if the value has been set.
func (o *ObservationStationJsonLd) GetFireWeatherZoneOk() (*string, bool) {
	if o == nil || IsNil(o.FireWeatherZone) {
		return nil, false
	}
	return o.FireWeatherZone, true
}

// HasFireWeatherZone returns a boolean if a field has been set.
func (o *ObservationStationJsonLd) HasFireWeatherZone() bool {
	if o != nil && !IsNil(o.FireWeatherZone) {
		return true
	}

	return false
}

// SetFireWeatherZone gets a reference to the given string and assigns it to the FireWeatherZone field.
func (o *ObservationStationJsonLd) SetFireWeatherZone(v string) {
	o.FireWeatherZone = &v
}

func (o ObservationStationJsonLd) MarshalJSON() ([]byte, error) {
	toSerialize,err := o.ToMap()
	if err != nil {
		return []byte{}, err
	}
	return json.Marshal(toSerialize)
}

func (o ObservationStationJsonLd) ToMap() (map[string]interface{}, error) {
	toSerialize := map[string]interface{}{}
	toSerialize["@context"] = o.Context
	toSerialize["geometry"] = o.Geometry.Get()
	if !IsNil(o.Id) {
		toSerialize["@id"] = o.Id
	}
	if !IsNil(o.Type) {
		toSerialize["@type"] = o.Type
	}
	if !IsNil(o.Elevation) {
		toSerialize["elevation"] = o.Elevation
	}
	if !IsNil(o.StationIdentifier) {
		toSerialize["stationIdentifier"] = o.StationIdentifier
	}
	if !IsNil(o.Name) {
		toSerialize["name"] = o.Name
	}
	if !IsNil(o.TimeZone) {
		toSerialize["timeZone"] = o.TimeZone
	}
	if !IsNil(o.Forecast) {
		toSerialize["forecast"] = o.Forecast
	}
	if !IsNil(o.County) {
		toSerialize["county"] = o.County
	}
	if !IsNil(o.FireWeatherZone) {
		toSerialize["fireWeatherZone"] = o.FireWeatherZone
	}
	return toSerialize, nil
}

func (o *ObservationStationJsonLd) UnmarshalJSON(data []byte) (err error) {
	// This validates that all required properties are included in the JSON object
	// by unmarshalling the object into a generic map with string keys and checking
	// that every required field exists as a key in the generic map.
	requiredProperties := []string{
		"@context",
		"geometry",
	}

	allProperties := make(map[string]interface{})

	err = json.Unmarshal(data, &allProperties)

	if err != nil {
		return err;
	}

	for _, requiredProperty := range(requiredProperties) {
		if _, exists := allProperties[requiredProperty]; !exists {
			return fmt.Errorf("no value given for required property %v", requiredProperty)
		}
	}

	varObservationStationJsonLd := _ObservationStationJsonLd{}

	decoder := json.NewDecoder(bytes.NewReader(data))
	decoder.DisallowUnknownFields()
	err = decoder.Decode(&varObservationStationJsonLd)

	if err != nil {
		return err
	}

	*o = ObservationStationJsonLd(varObservationStationJsonLd)

	return err
}

type NullableObservationStationJsonLd struct {
	value *ObservationStationJsonLd
	isSet bool
}

func (v NullableObservationStationJsonLd) Get() *ObservationStationJsonLd {
	return v.value
}

func (v *NullableObservationStationJsonLd) Set(val *ObservationStationJsonLd) {
	v.value = val
	v.isSet = true
}

func (v NullableObservationStationJsonLd) IsSet() bool {
	return v.isSet
}

func (v *NullableObservationStationJsonLd) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableObservationStationJsonLd(val *ObservationStationJsonLd) *NullableObservationStationJsonLd {
	return &NullableObservationStationJsonLd{value: val, isSet: true}
}

func (v NullableObservationStationJsonLd) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableObservationStationJsonLd) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}


