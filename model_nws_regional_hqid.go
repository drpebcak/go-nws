/*
weather.gov API

weather.gov API

API version: 2.0.0
*/

// Code generated by OpenAPI Generator (https://openapi-generator.tech); DO NOT EDIT.

package openapi

import (
	"encoding/json"
	"fmt"
)

// NWSRegionalHQId Three-letter identifier for a NWS Regional HQ.
type NWSRegionalHQId string

// List of NWSRegionalHQId
const (
	ARH NWSRegionalHQId = "ARH"
	CRH NWSRegionalHQId = "CRH"
	ERH NWSRegionalHQId = "ERH"
	PRH NWSRegionalHQId = "PRH"
	SRH NWSRegionalHQId = "SRH"
	WRH NWSRegionalHQId = "WRH"
)

// All allowed values of NWSRegionalHQId enum
var AllowedNWSRegionalHQIdEnumValues = []NWSRegionalHQId{
	"ARH",
	"CRH",
	"ERH",
	"PRH",
	"SRH",
	"WRH",
}

func (v *NWSRegionalHQId) UnmarshalJSON(src []byte) error {
	var value string
	err := json.Unmarshal(src, &value)
	if err != nil {
		return err
	}
	enumTypeValue := NWSRegionalHQId(value)
	for _, existing := range AllowedNWSRegionalHQIdEnumValues {
		if existing == enumTypeValue {
			*v = enumTypeValue
			return nil
		}
	}

	return fmt.Errorf("%+v is not a valid NWSRegionalHQId", value)
}

// NewNWSRegionalHQIdFromValue returns a pointer to a valid NWSRegionalHQId
// for the value passed as argument, or an error if the value passed is not allowed by the enum
func NewNWSRegionalHQIdFromValue(v string) (*NWSRegionalHQId, error) {
	ev := NWSRegionalHQId(v)
	if ev.IsValid() {
		return &ev, nil
	} else {
		return nil, fmt.Errorf("invalid value '%v' for NWSRegionalHQId: valid values are %v", v, AllowedNWSRegionalHQIdEnumValues)
	}
}

// IsValid return true if the value is valid for the enum, false otherwise
func (v NWSRegionalHQId) IsValid() bool {
	for _, existing := range AllowedNWSRegionalHQIdEnumValues {
		if existing == v {
			return true
		}
	}
	return false
}

// Ptr returns reference to NWSRegionalHQId value
func (v NWSRegionalHQId) Ptr() *NWSRegionalHQId {
	return &v
}

type NullableNWSRegionalHQId struct {
	value *NWSRegionalHQId
	isSet bool
}

func (v NullableNWSRegionalHQId) Get() *NWSRegionalHQId {
	return v.value
}

func (v *NullableNWSRegionalHQId) Set(val *NWSRegionalHQId) {
	v.value = val
	v.isSet = true
}

func (v NullableNWSRegionalHQId) IsSet() bool {
	return v.isSet
}

func (v *NullableNWSRegionalHQId) Unset() {
	v.value = nil
	v.isSet = false
}

func NewNullableNWSRegionalHQId(val *NWSRegionalHQId) *NullableNWSRegionalHQId {
	return &NullableNWSRegionalHQId{value: val, isSet: true}
}

func (v NullableNWSRegionalHQId) MarshalJSON() ([]byte, error) {
	return json.Marshal(v.value)
}

func (v *NullableNWSRegionalHQId) UnmarshalJSON(src []byte) error {
	v.isSet = true
	return json.Unmarshal(src, &v.value)
}

